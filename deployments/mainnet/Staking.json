{
  "address": "0x974eDeCA326930C6924F7DDB2C083cAfcd1C7DD3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "legacyContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interim",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "legacyCarry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "legacyStakeAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cumulativeStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_userRewardPerTokenPaid",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewards",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_stakeStart",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "accountBalances",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "isMigrated",
          "type": "bool[]"
        }
      ],
      "name": "migrateAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "migrated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "setLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "updatePeriodFinish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "viewRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9c89241119d6375af4ea759d49a82795cd29c69952d8fb883a04718453ef0e6",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x974eDeCA326930C6924F7DDB2C083cAfcd1C7DD3",
    "transactionIndex": 141,
    "gasUsed": "1870786",
    "logsBloom": "0x
    "blockHash": "0xd30384ba1e107cf8c88f4540b2ce31590f0bfb2c6c48e17c47041e04286a40b2",
    "transactionHash": "0xa9c89241119d6375af4ea759d49a82795cd29c69952d8fb883a04718453ef0e6",
    "logs": [
      {
        "transactionIndex": 141,
        "blockNumber": 13574113,
        "transactionHash": "0xa9c89241119d6375af4ea759d49a82795cd29c69952d8fb883a04718453ef0e6",
        "address": "0x974eDeCA326930C6924F7DDB2C083cAfcd1C7DD3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023292e9ba8434e59e6bac1907ba7425211c4de27"
        ],
        "data": "0x",
        "logIndex": 222,
        "blockHash": "0xd30384ba1e107cf8c88f4540b2ce31590f0bfb2c6c48e17c47041e04286a40b2"
      }
    ],
    "blockNumber": 13574113,
    "cumulativeGasUsed": "11202250",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAa4e3edb11AFa93c41db59842b29de64b72E355B",
    "0xAa4e3edb11AFa93c41db59842b29de64b72E355B",
    "0x6002830D2f02D987B18d01A1CCce842ae09899d5",
    "0x072379C47Dd69dc7F2377E366b5e52D27256FD2B"
  ],
  "solcInputHash": "ddac44e6cf14c7e180ea1c3a340c0cfd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"legacyContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interim\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyCarry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"legacyStakeAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_userRewardPerTokenPaid\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stakeStart\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"accountBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isMigrated\",\"type\":\"bool[]\"}],\"name\":\"migrateAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updatePeriodFinish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"viewRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MARGIN_CALLER = 2;\\nuint256 constant BORROWER = 3;\\nuint256 constant MARGIN_TRADER = 4;\\nuint256 constant FEE_SOURCE = 5;\\nuint256 constant LIQUIDATOR = 6;\\nuint256 constant AUTHORIZED_FUND_TRADER = 7;\\nuint256 constant INCENTIVE_REPORTER = 8;\\nuint256 constant TOKEN_ACTIVATOR = 9;\\nuint256 constant STAKE_PENALIZER = 10;\\nuint256 constant LENDER = 11;\\n\\nuint256 constant FUND = 101;\\nuint256 constant LENDING = 102;\\nuint256 constant MARGIN_ROUTER = 103;\\nuint256 constant CROSS_MARGIN_TRADING = 104;\\nuint256 constant FEE_CONTROLLER = 105;\\nuint256 constant PRICE_CONTROLLER = 106;\\nuint256 constant ADMIN = 107;\\nuint256 constant INCENTIVE_DISTRIBUTION = 108;\\nuint256 constant TOKEN_ADMIN = 109;\\nuint256 constant FEE_RECIPIENT = 110;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][TOKEN_ACTIVATOR] = true;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc038a3a0ed0deef452dd08be6998f027293a53815447c8476d76636e73ae957d\",\"license\":\"BUSL-1.1\"},\"contracts/Staking.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TokenStaking.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/stakingrewards\\ncontract Staking is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    TokenStaking immutable legacy;\\n    Staking immutable interim;\\n\\n    IERC20 public immutable rewardsToken;\\n    IERC20 public immutable stakingToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 30 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    uint256 public lockTime = 30 days;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    mapping(address => uint256) public stakeStart;\\n    mapping(address => bool) public migrated;\\n    uint256 constant MAX_WEIGHT = 3 * 10**19;\\n    uint256 public startingWeights;\\n    mapping(address => StakeAccount) public legacyStakeAccounts;\\n\\n    uint256 public legacyCarry;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _rewardsToken,\\n        address _stakingToken,\\n        address legacyContract,\\n        address _interim\\n    ) Ownable() {\\n        rewardsToken = IERC20(_rewardsToken);\\n        stakingToken = IERC20(_stakingToken);\\n        legacy = TokenStaking(legacyContract);\\n        interim = Staking(_interim);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function viewRewardAmount(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function _rewardDiff(StakeAccount memory account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalReward = legacy.viewUpdatedCumulativeReward();\\n\\n        uint256 startingReward =\\n            ((totalReward - account.cumulativeStart) * account.stakeWeight) /\\n                (startingWeights + 1);\\n\\n        uint256 currentReward =\\n            ((totalReward - account.cumulativeStart) * account.stakeWeight) /\\n                (legacy.totalCurrentWeights() + 1);\\n\\n        if (startingReward >= currentReward) {\\n            return 0;\\n        } else {\\n            return currentReward - startingReward;\\n        }\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n        if (stakeStart[msg.sender] == 0) {\\n            stakeStart[msg.sender] = block.timestamp;\\n        }\\n    }\\n\\n    function withdrawStake(uint256 amount)\\n        external\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(block.timestamp >= stakeStart[msg.sender] + lockTime);\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n\\n        if (migrated[msg.sender]) {\\n            uint256 w;\\n            uint256 __;\\n            (__, w, __, __) = legacy.stakeAccounts(msg.sender);\\n            require(w < MAX_WEIGHT, \\\"Migrate account first\\\");\\n\\n            uint256 rewardDiff = _rewardDiff(legacyStakeAccounts[msg.sender]);\\n            if (rewardDiff >= amount) {\\n                amount = 0;\\n            } else {\\n                amount -= rewardDiff;\\n            }\\n        }\\n\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function withdrawReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        if (legacyCarry > 0) {\\n            reward -= legacyCarry;\\n            legacyCarry = 0;\\n        }\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    // End rewards emission earlier\\n    function updatePeriodFinish(uint256 timestamp)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        periodFinish = timestamp;\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    function setLockTime(uint256 t) external onlyOwner {\\n        lockTime = t;\\n    }\\n\\n    // function migrateParams() external onlyOwner {\\n    //     periodFinish = block.timestamp + 60 days;\\n    //     lastUpdateTime = block.timestamp;\\n\\n    //     rewardRate = interim.rewardRate() / 5;\\n    //     rewardPerTokenStored = interim.rewardPerTokenStored();\\n\\n    //     startingWeights = interim.startingWeights();\\n    //     legacyCarry = interim.legacyCarry();\\n    //     _totalSupply = interim.totalSupply();\\n    // }\\n\\n    // function migrateAccounts(address[] calldata accounts) external onlyOwner {\\n    //     for (uint256 i; accounts.length > i; i++) {\\n    //         address accountAddress = accounts[i];\\n    //         userRewardPerTokenPaid[accountAddress] = interim\\n    //             .userRewardPerTokenPaid(accountAddress);\\n    //         rewards[accountAddress] = interim.rewards(accountAddress);\\n    //         stakeStart[accountAddress] = interim.stakeStart(accountAddress);\\n    //         _balances[accountAddress] = interim.balanceOf(accountAddress);\\n\\n    //         bool isMigrated = interim.migrated(accountAddress);\\n    //         if (isMigrated) {\\n    //             migrated[accountAddress] = isMigrated;\\n    //             StakeAccount memory account;\\n\\n    //             (\\n    //                 account.stakeAmount,\\n    //                 account.stakeWeight,\\n    //                 account.cumulativeStart,\\n    //                 account.lockEnd\\n    //             ) = interim.legacyStakeAccounts(accountAddress);\\n    //             legacyStakeAccounts[accountAddress] = account;\\n    //         }\\n    //     }\\n    // }\\n\\n    function migrateAccounts(\\n        address[] calldata accounts,\\n        uint256[] calldata _userRewardPerTokenPaid,\\n        uint256[] calldata _rewards,\\n        uint256[] calldata _stakeStart,\\n        uint256[] calldata accountBalances,\\n        bool[] calldata isMigrated\\n    ) external onlyOwner {\\n        rewardRate = 1157407407407407;\\n        rewardPerTokenStored = interim.rewardPerTokenStored();\\n        startingWeights = 1969129866821224396662477;\\n        _totalSupply = interim.totalSupply();\\n\\n        periodFinish = block.timestamp + 60 days;\\n        lastUpdateTime = block.timestamp;\\n\\n\\n        for (uint256 i; accounts.length > i; i++) {\\n            address accountAddress = accounts[i];\\n            userRewardPerTokenPaid[accountAddress] = _userRewardPerTokenPaid[i];\\n            rewards[accountAddress] = _rewards[i];\\n            stakeStart[accountAddress] = _stakeStart[i];\\n            _balances[accountAddress] = accountBalances[i];\\n\\n            if (isMigrated[i]) {\\n                migrated[accountAddress] = true;\\n\\n                StakeAccount memory account;\\n\\n                (\\n                    account.stakeAmount,\\n                    account.stakeWeight,\\n                    account.cumulativeStart,\\n                    account.lockEnd\\n                ) = interim.legacyStakeAccounts(accountAddress);\\n                legacyStakeAccounts[accountAddress] = account;\\n            }\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = viewRewardAmount(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n}\\n\",\"keccak256\":\"0x3e36c62a6ba1a41f8e06b4e4bfcedaa8f1460aa5b8b76d0e90c04fff0a2db9cd\"},\"contracts/TokenStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\nstruct StakeAccount {\\n    uint256 stakeAmount;\\n    uint256 stakeWeight;\\n    uint256 cumulativeStart;\\n    uint256 lockEnd;\\n}\\n\\nabstract contract TokenStaking {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable stakeToken;\\n    /// Margenswap (MFI) token address\\n    IERC20 public immutable MFI;\\n    Roles roles;\\n\\n    mapping(address => StakeAccount) public stakeAccounts;\\n\\n    uint256 public cumulativeReward;\\n    uint256 public lastCumulativeUpdateBlock;\\n    uint256 public totalCurrentWeights;\\n    uint256 public totalCurrentRewardPerBlock;\\n    uint256 public rewardTarget;\\n\\n    constructor(\\n        address _MFI,\\n        address _stakeToken,\\n        uint256 initialRewardPerBlock,\\n        address _roles\\n    ) {\\n        MFI = IERC20(_MFI);\\n        stakeToken = IERC20(_stakeToken);\\n        roles = Roles(_roles);\\n\\n        lastCumulativeUpdateBlock = block.number;\\n        totalCurrentRewardPerBlock = initialRewardPerBlock;\\n    }\\n\\n    // TODO: function to load up with MFI\\n\\n    function setTotalRewardPerBlock(uint256 rewardPerBlock) external {\\n        require(\\n            msg.sender == roles.owner() || msg.sender == roles.executor(),\\n            \\\"Not authorized\\\"\\n        );\\n        updateCumulativeReward();\\n        totalCurrentRewardPerBlock = rewardPerBlock;\\n    }\\n\\n    function add2RewardTarget(uint256 amount) external {\\n        MFI.safeTransferFrom(msg.sender, address(this), amount);\\n        updateCumulativeReward();\\n        rewardTarget += amount;\\n    }\\n\\n    function removeFromRewardTarget(uint256 amount, address recipient)\\n        external\\n    {\\n        require(\\n            msg.sender == roles.owner() || msg.sender == roles.executor(),\\n            \\\"Not authorized\\\"\\n        );\\n        MFI.safeTransfer(recipient, amount);\\n        updateCumulativeReward();\\n        rewardTarget -= amount;\\n        require(rewardTarget >= cumulativeReward, \\\"Trying to remove too much\\\");\\n    }\\n\\n    function stake(uint256 amount, uint256 duration) external {\\n        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        StakeAccount storage account = stakeAccounts[msg.sender];\\n        uint256 extantAmount = account.stakeAmount;\\n\\n        if (extantAmount > 0) {\\n            _withdrawReward(msg.sender, account);\\n        }\\n\\n        account.stakeAmount = extantAmount + amount;\\n        uint256 w =\\n            duration >= 90 days\\n                ? 3\\n                : (duration >= 30 days ? 2 : (duration >= 1 weeks ? 1 : 0));\\n        account.stakeWeight += w * amount;\\n        totalCurrentWeights += w * amount;\\n        account.cumulativeStart = updateCumulativeReward();\\n\\n        account.lockEnd = max(block.timestamp + duration, account.lockEnd);\\n    }\\n\\n    function withdrawStake(uint256 amount) external {\\n        StakeAccount storage account = stakeAccounts[msg.sender];\\n        require(block.timestamp >= account.lockEnd, \\\"Stake is still locked\\\");\\n        _withdrawReward(msg.sender, account);\\n        uint256 weightDiff =\\n            (amount * account.stakeWeight) / account.stakeAmount;\\n        account.stakeWeight -= weightDiff;\\n        totalCurrentWeights -= weightDiff;\\n        account.stakeAmount -= amount;\\n        account.cumulativeStart = updateCumulativeReward();\\n    }\\n\\n    function viewUpdatedCumulativeReward() public view returns (uint256) {\\n        return\\n            min(\\n                rewardTarget,\\n                cumulativeReward +\\n                    (block.number - lastCumulativeUpdateBlock) *\\n                    totalCurrentRewardPerBlock\\n            );\\n    }\\n\\n    function updateCumulativeReward() public returns (uint256) {\\n        if (block.number > lastCumulativeUpdateBlock) {\\n            cumulativeReward = viewUpdatedCumulativeReward();\\n            lastCumulativeUpdateBlock = block.number;\\n        }\\n        return cumulativeReward;\\n    }\\n\\n    function _viewRewardAmount(StakeAccount storage account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalReward = viewUpdatedCumulativeReward();\\n        return\\n            ((totalReward - account.cumulativeStart) * account.stakeWeight) /\\n            (totalCurrentWeights + 1);\\n    }\\n\\n    function viewRewardAmount(address account) external view returns (uint256) {\\n        return _viewRewardAmount(stakeAccounts[account]);\\n    }\\n\\n    function _withdrawReward(address recipient, StakeAccount storage account)\\n        internal\\n    {\\n        if (account.stakeWeight > 0) {\\n            uint256 reward =\\n                min(_viewRewardAmount(account), MFI.balanceOf(address(this)));\\n\\n            MFI.safeTransfer(recipient, reward);\\n        }\\n    }\\n\\n    function withdrawReward() external {\\n        StakeAccount storage account = stakeAccounts[msg.sender];\\n        _withdrawReward(msg.sender, account);\\n        account.cumulativeStart = cumulativeReward;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// @dev maximum\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79a6f7d809969c7c86ae2b98cfe49959d0016e32e7c09babcdf13c932a94fea1\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101006040526000600255600060035562278d0060045562278d006007553480156200002a57600080fd5b50604051620020ed380380620020ed8339810160408190526200004d91620000fc565b60016000556200005d336200008d565b6001600160601b0319606094851b811660c05292841b831660e05290831b821660805290911b1660a05262000158565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620000f757600080fd5b919050565b6000806000806080858703121562000112578384fd5b6200011d85620000df565b93506200012d60208601620000df565b92506200013d60408601620000df565b91506200014d60608601620000df565b905092959194509250565b60805160601c60a05160601c60c05160601c60e05160601c611f17620001d66000396000818161036b01528181610795015261114a0152600081816104630152818161091e01526112bd015260008181610b1c01528181610bc50152610e6401526000818161064b015281816115a501526116750152611f176000f3fe608060405234801561001057600080fd5b50600436106101fb5760003560e01c806380faa57d1161011a578063c885bc58116100ad578063d1af0c7d1161007c578063d1af0c7d1461045e578063dbe85f7014610485578063df136d6514610498578063ebe2b12b146104a1578063f2fde38b146104aa576101fb565b8063c885bc5814610432578063c8f33c911461043a578063cc1a378f14610443578063cd3daf9d14610456576101fb565b8063a204cf85116100e9578063a204cf85146103fa578063a694fc3a14610403578063ae04d45d14610416578063be7b51cc14610429576101fb565b806380faa57d146103ae5780638980f11f146103b65780638b876347146103c95780638da5cb5b146103e9576101fb565b80634ba0a5ee1161019257806370a082311161016157806370a082311461034b578063715018a61461035e57806372f702f3146103665780637b0a47ee146103a5576101fb565b80634ba0a5ee1461029d578063556f6e6b146102d0578063568a2d98146102e35780635752de4314610338576101fb565b80631c1f78eb116101ce5780631c1f78eb1461026457806325d5971f1461026c578063386a9525146102815780633c6b16ab1461028a576101fb565b80630700037d146102005780630d6680871461023357806312a7f6611461023c57806318160ddd1461025c575b600080fd5b61022061020e366004611b31565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b61022060075481565b61022061024a366004611b31565b600a6020526000908152604090205481565b6102206104bd565b6102206104c4565b61027f61027a366004611ce8565b6104e2565b005b61022060045481565b61027f610298366004611ce8565b6107fb565b6102c06102ab366004611b31565b600b6020526000908152604090205460ff1681565b604051901515815260200161022a565b61027f6102de366004611ce8565b610a56565b6103186102f1366004611b31565b600d6020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161022a565b61027f610346366004611b74565b610ae2565b610220610359366004611b31565b610f4a565b61027f610f69565b61038d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161022a565b61022060035481565b610220610f9f565b61027f6103c4366004611b4b565b610fad565b6102206103d7366004611b31565b60086020526000908152604090205481565b6001546001600160a01b031661038d565b610220600c5481565b61027f610411366004611ce8565b611043565b61027f610424366004611ce8565b6111df565b610220600e5481565b61027f61120e565b61022060055481565b61027f610451366004611ce8565b61131e565b610220611420565b61038d7f000000000000000000000000000000000000000000000000000000000000000081565b610220610493366004611b31565b611474565b61022060065481565b61022060025481565b61027f6104b8366004611b31565b6114e6565b600f545b90565b60006104dd60045460035461158190919063ffffffff16565b905090565b6002600054141561050e5760405162461bcd60e51b815260040161050590611dd1565b60405180910390fd5b60026000553361051c611420565b600655610527610f9f565b6005556001600160a01b0381161561056e5761054281611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b600082116105b25760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b6044820152606401610505565b600754336000908152600a60205260409020546105cf9190611e08565b4210156105db57600080fd5b600f546105e89083611594565b600f55336000908152601060205260409020546106059083611594565b33600090815260106020908152604080832093909355600b9052205460ff16156107885760405163e57466fd60e01b815233600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e57466fd9060240160806040518083038186803b15801561068d57600080fd5b505afa1580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c59190611d18565b50909350909150506801a055690d9db80000821061071d5760405162461bcd60e51b8152602060048201526015602482015274135a59dc985d19481858d8dbdd5b9d08199a5c9cdd605a1b6044820152606401610505565b336000908152600d60209081526040808320815160808101835281548152600182015493810193909352600281015491830191909152600301546060820152610765906115a0565b90508481106107775760009450610784565b6107818186611e5f565b94505b5050505b6107bc6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384611760565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600055565b6001546001600160a01b031633146108255760405162461bcd60e51b815260040161050590611d9c565b600061082f611420565b60065561083a610f9f565b6005556001600160a01b038116156108815761085581611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b600e541561089e57600e546108969083611e5f565b6000600e5591505b60025442106108bd576004546108b59083906117c8565b600355610906565b6002546000906108cd9042611594565b905060006108e66003548361158190919063ffffffff16565b600454909150610900906108fa86846117d4565b906117c8565b60035550505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561096857600080fd5b505afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a09190611d00565b90506109b7600454826117c890919063ffffffff16565b6003541115610a085760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610505565b426005819055600454610a1b91906117d4565b6002556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6001546001600160a01b03163314610a805760405162461bcd60e51b815260040161050590611d9c565b6000610a8a611420565b600655610a95610f9f565b6005556001600160a01b03811615610adc57610ab081611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b50600255565b6001546001600160a01b03163314610b0c5760405162461bcd60e51b815260040161050590611d9c565b66041ca7e961012f6003819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df136d656040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7357600080fd5b505afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190611d00565b6006819055506a01a0fabe7530bc41f2a6cd600c819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1c57600080fd5b505afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611d00565b600f55610c6442624f1a00611e08565b6002554260055560005b808c1115610f3b5760008d8d83818110610c9857634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cad9190611b31565b90508b8b83818110610ccf57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03841660009081526008602090815260409091209102929092013590915550898983818110610d1557634e487b7160e01b600052603260045260246000fd5b6001600160a01b03841660009081526009602090815260409091209102929092013590915550878783818110610d5b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0384166000908152600a602090815260409091209102929092013590915550858583818110610da157634e487b7160e01b600052603260045260246000fd5b6001600160a01b03841660009081526010602090815260409091209102929092013590915550838383818110610de757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610dfc9190611cb0565b15610f28576001600160a01b0381166000908152600b60209081526040808320805460ff19166001179055805160808101825283815291820183905281018290526060810191909152604051630ad145b360e31b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063568a2d989060240160806040518083038186803b158015610ea657600080fd5b505afa158015610eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ede9190611d18565b60608501908152604080860192835260208087019485529486526001600160a01b0387166000908152600d9095529093209351845590516001840155516002830155516003909101555b5080610f3381611ea2565b915050610c6e565b50505050505050505050505050565b6001600160a01b0381166000908152601060205260409020545b919050565b6001546001600160a01b03163314610f935760405162461bcd60e51b815260040161050590611d9c565b610f9d60006117e0565b565b60006104dd42600254611832565b6001546001600160a01b03163314610fd75760405162461bcd60e51b815260040161050590611d9c565b610ffd610fec6001546001600160a01b031690565b6001600160a01b0384169083611760565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b600260005414156110665760405162461bcd60e51b815260040161050590611dd1565b600260005533611074611420565b60065561107f610f9f565b6005556001600160a01b038116156110c65761109a81611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b600082116111075760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b6044820152606401610505565b600f5461111490836117d4565b600f553360009081526010602052604090205461113190836117d4565b3360008181526010602052604090209190915561117a907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316903085611848565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a2336000908152600a60205260409020546111d657336000908152600a602052604090204290555b50506001600055565b6001546001600160a01b031633146112095760405162461bcd60e51b815260040161050590611d9c565b600755565b600260005414156112315760405162461bcd60e51b815260040161050590611dd1565b60026000553361123f611420565b60065561124a610f9f565b6005556001600160a01b038116156112915761126581611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b3360009081526009602052604090205480156111d657336000818152600960205260408120556112ec907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083611760565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016107ea565b6001546001600160a01b031633146113485760405162461bcd60e51b815260040161050590611d9c565b60025442116113e55760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610505565b60048190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200160405180910390a150565b6000600f546000141561143657506006546104c1565b6104dd61146b600f546108fa670de0b6b3a764000061146560035461146560055461145f610f9f565b90611594565b90611581565b600654906117d4565b6001600160a01b03811660009081526009602090815260408083205460089092528220546114e091906114da90670de0b6b3a7640000906108fa906114bb9061145f611420565b6001600160a01b03881660009081526010602052604090205490611581565b906117d4565b92915050565b6001546001600160a01b031633146115105760405162461bcd60e51b815260040161050590611d9c565b6001600160a01b0381166115755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610505565b61157e816117e0565b50565b600061158d8284611e40565b9392505050565b600061158d8284611e5f565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c8d65d596040518163ffffffff1660e01b815260040160206040518083038186803b1580156115fc57600080fd5b505afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116349190611d00565b90506000600c5460016116479190611e08565b6020850151604086015161165b9085611e5f565b6116659190611e40565b61166f9190611e20565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116cc57600080fd5b505afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190611d00565b61170f906001611e08565b602086015160408701516117239086611e5f565b61172d9190611e40565b6117379190611e20565b905080821061174c5760009350505050610f64565b6117568282611e5f565b9350505050610f64565b6040516001600160a01b0383166024820152604481018290526117c390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611886565b505050565b600061158d8284611e20565b600061158d8284611e08565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818310611841578161158d565b5090919050565b6040516001600160a01b03808516602483015283166044820152606481018290526118809085906323b872dd60e01b9060840161178c565b50505050565b60006118db826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119589092919063ffffffff16565b8051909150156117c357808060200190518101906118f99190611ccc565b6117c35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610505565b6060611967848460008561196f565b949350505050565b6060824710156119d05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610505565b843b611a1e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610505565b600080866001600160a01b03168587604051611a3a9190611d4d565b60006040518083038185875af1925050503d8060008114611a77576040519150601f19603f3d011682016040523d82523d6000602084013e611a7c565b606091505b5091509150611a8c828286611a97565b979650505050505050565b60608315611aa657508161158d565b825115611ab65782518084602001fd5b8160405162461bcd60e51b81526004016105059190611d69565b80356001600160a01b0381168114610f6457600080fd5b60008083601f840112611af8578182fd5b50813567ffffffffffffffff811115611b0f578182fd5b6020830191508360208260051b8501011115611b2a57600080fd5b9250929050565b600060208284031215611b42578081fd5b61158d82611ad0565b60008060408385031215611b5d578081fd5b611b6683611ad0565b946020939093013593505050565b60008060008060008060008060008060008060c08d8f031215611b95578788fd5b67ffffffffffffffff8d351115611baa578788fd5b611bb78e8e358f01611ae7565b909c509a5067ffffffffffffffff60208e01351115611bd4578788fd5b611be48e60208f01358f01611ae7565b909a50985067ffffffffffffffff60408e01351115611c01578788fd5b611c118e60408f01358f01611ae7565b909850965067ffffffffffffffff60608e01351115611c2e578586fd5b611c3e8e60608f01358f01611ae7565b909650945067ffffffffffffffff60808e01351115611c5b578384fd5b611c6b8e60808f01358f01611ae7565b909450925067ffffffffffffffff60a08e01351115611c88578081fd5b611c988e60a08f01358f01611ae7565b81935080925050509295989b509295989b509295989b565b600060208284031215611cc1578081fd5b813561158d81611ed3565b600060208284031215611cdd578081fd5b815161158d81611ed3565b600060208284031215611cf9578081fd5b5035919050565b600060208284031215611d11578081fd5b5051919050565b60008060008060808587031215611d2d578384fd5b505082516020840151604085015160609095015191969095509092509050565b60008251611d5f818460208701611e76565b9190910192915050565b6000602082528251806020840152611d88816040850160208701611e76565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611e1b57611e1b611ebd565b500190565b600082611e3b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611e5a57611e5a611ebd565b500290565b600082821015611e7157611e71611ebd565b500390565b60005b83811015611e91578181015183820152602001611e79565b838111156118805750506000910152565b6000600019821415611eb657611eb6611ebd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b801515811461157e57600080fdfea2646970667358221220c556c75a033eba36db2dd4bfa21b91833027ffa88ba03d29a5b74c66e78f98c664736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c806380faa57d1161011a578063c885bc58116100ad578063d1af0c7d1161007c578063d1af0c7d1461045e578063dbe85f7014610485578063df136d6514610498578063ebe2b12b146104a1578063f2fde38b146104aa576101fb565b8063c885bc5814610432578063c8f33c911461043a578063cc1a378f14610443578063cd3daf9d14610456576101fb565b8063a204cf85116100e9578063a204cf85146103fa578063a694fc3a14610403578063ae04d45d14610416578063be7b51cc14610429576101fb565b806380faa57d146103ae5780638980f11f146103b65780638b876347146103c95780638da5cb5b146103e9576101fb565b80634ba0a5ee1161019257806370a082311161016157806370a082311461034b578063715018a61461035e57806372f702f3146103665780637b0a47ee146103a5576101fb565b80634ba0a5ee1461029d578063556f6e6b146102d0578063568a2d98146102e35780635752de4314610338576101fb565b80631c1f78eb116101ce5780631c1f78eb1461026457806325d5971f1461026c578063386a9525146102815780633c6b16ab1461028a576101fb565b80630700037d146102005780630d6680871461023357806312a7f6611461023c57806318160ddd1461025c575b600080fd5b61022061020e366004611b31565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b61022060075481565b61022061024a366004611b31565b600a6020526000908152604090205481565b6102206104bd565b6102206104c4565b61027f61027a366004611ce8565b6104e2565b005b61022060045481565b61027f610298366004611ce8565b6107fb565b6102c06102ab366004611b31565b600b6020526000908152604090205460ff1681565b604051901515815260200161022a565b61027f6102de366004611ce8565b610a56565b6103186102f1366004611b31565b600d6020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161022a565b61027f610346366004611b74565b610ae2565b610220610359366004611b31565b610f4a565b61027f610f69565b61038d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161022a565b61022060035481565b610220610f9f565b61027f6103c4366004611b4b565b610fad565b6102206103d7366004611b31565b60086020526000908152604090205481565b6001546001600160a01b031661038d565b610220600c5481565b61027f610411366004611ce8565b611043565b61027f610424366004611ce8565b6111df565b610220600e5481565b61027f61120e565b61022060055481565b61027f610451366004611ce8565b61131e565b610220611420565b61038d7f000000000000000000000000000000000000000000000000000000000000000081565b610220610493366004611b31565b611474565b61022060065481565b61022060025481565b61027f6104b8366004611b31565b6114e6565b600f545b90565b60006104dd60045460035461158190919063ffffffff16565b905090565b6002600054141561050e5760405162461bcd60e51b815260040161050590611dd1565b60405180910390fd5b60026000553361051c611420565b600655610527610f9f565b6005556001600160a01b0381161561056e5761054281611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b600082116105b25760405162461bcd60e51b8152602060048201526011602482015270043616e6e6f74207769746864726177203607c1b6044820152606401610505565b600754336000908152600a60205260409020546105cf9190611e08565b4210156105db57600080fd5b600f546105e89083611594565b600f55336000908152601060205260409020546106059083611594565b33600090815260106020908152604080832093909355600b9052205460ff16156107885760405163e57466fd60e01b815233600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e57466fd9060240160806040518083038186803b15801561068d57600080fd5b505afa1580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c59190611d18565b50909350909150506801a055690d9db80000821061071d5760405162461bcd60e51b8152602060048201526015602482015274135a59dc985d19481858d8dbdd5b9d08199a5c9cdd605a1b6044820152606401610505565b336000908152600d60209081526040808320815160808101835281548152600182015493810193909352600281015491830191909152600301546060820152610765906115a0565b90508481106107775760009450610784565b6107818186611e5f565b94505b5050505b6107bc6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384611760565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600055565b6001546001600160a01b031633146108255760405162461bcd60e51b815260040161050590611d9c565b600061082f611420565b60065561083a610f9f565b6005556001600160a01b038116156108815761085581611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b600e541561089e57600e546108969083611e5f565b6000600e5591505b60025442106108bd576004546108b59083906117c8565b600355610906565b6002546000906108cd9042611594565b905060006108e66003548361158190919063ffffffff16565b600454909150610900906108fa86846117d4565b906117c8565b60035550505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561096857600080fd5b505afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a09190611d00565b90506109b7600454826117c890919063ffffffff16565b6003541115610a085760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610505565b426005819055600454610a1b91906117d4565b6002556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6001546001600160a01b03163314610a805760405162461bcd60e51b815260040161050590611d9c565b6000610a8a611420565b600655610a95610f9f565b6005556001600160a01b03811615610adc57610ab081611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b50600255565b6001546001600160a01b03163314610b0c5760405162461bcd60e51b815260040161050590611d9c565b66041ca7e961012f6003819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df136d656040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7357600080fd5b505afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab9190611d00565b6006819055506a01a0fabe7530bc41f2a6cd600c819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1c57600080fd5b505afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611d00565b600f55610c6442624f1a00611e08565b6002554260055560005b808c1115610f3b5760008d8d83818110610c9857634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cad9190611b31565b90508b8b83818110610ccf57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03841660009081526008602090815260409091209102929092013590915550898983818110610d1557634e487b7160e01b600052603260045260246000fd5b6001600160a01b03841660009081526009602090815260409091209102929092013590915550878783818110610d5b57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0384166000908152600a602090815260409091209102929092013590915550858583818110610da157634e487b7160e01b600052603260045260246000fd5b6001600160a01b03841660009081526010602090815260409091209102929092013590915550838383818110610de757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610dfc9190611cb0565b15610f28576001600160a01b0381166000908152600b60209081526040808320805460ff19166001179055805160808101825283815291820183905281018290526060810191909152604051630ad145b360e31b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063568a2d989060240160806040518083038186803b158015610ea657600080fd5b505afa158015610eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ede9190611d18565b60608501908152604080860192835260208087019485529486526001600160a01b0387166000908152600d9095529093209351845590516001840155516002830155516003909101555b5080610f3381611ea2565b915050610c6e565b50505050505050505050505050565b6001600160a01b0381166000908152601060205260409020545b919050565b6001546001600160a01b03163314610f935760405162461bcd60e51b815260040161050590611d9c565b610f9d60006117e0565b565b60006104dd42600254611832565b6001546001600160a01b03163314610fd75760405162461bcd60e51b815260040161050590611d9c565b610ffd610fec6001546001600160a01b031690565b6001600160a01b0384169083611760565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b600260005414156110665760405162461bcd60e51b815260040161050590611dd1565b600260005533611074611420565b60065561107f610f9f565b6005556001600160a01b038116156110c65761109a81611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b600082116111075760405162461bcd60e51b815260206004820152600e60248201526d043616e6e6f74207374616b6520360941b6044820152606401610505565b600f5461111490836117d4565b600f553360009081526010602052604090205461113190836117d4565b3360008181526010602052604090209190915561117a907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316903085611848565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a2336000908152600a60205260409020546111d657336000908152600a602052604090204290555b50506001600055565b6001546001600160a01b031633146112095760405162461bcd60e51b815260040161050590611d9c565b600755565b600260005414156112315760405162461bcd60e51b815260040161050590611dd1565b60026000553361123f611420565b60065561124a610f9f565b6005556001600160a01b038116156112915761126581611474565b6001600160a01b0382166000908152600960209081526040808320939093556006546008909152919020555b3360009081526009602052604090205480156111d657336000818152600960205260408120556112ec907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083611760565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016107ea565b6001546001600160a01b031633146113485760405162461bcd60e51b815260040161050590611d9c565b60025442116113e55760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610505565b60048190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200160405180910390a150565b6000600f546000141561143657506006546104c1565b6104dd61146b600f546108fa670de0b6b3a764000061146560035461146560055461145f610f9f565b90611594565b90611581565b600654906117d4565b6001600160a01b03811660009081526009602090815260408083205460089092528220546114e091906114da90670de0b6b3a7640000906108fa906114bb9061145f611420565b6001600160a01b03881660009081526010602052604090205490611581565b906117d4565b92915050565b6001546001600160a01b031633146115105760405162461bcd60e51b815260040161050590611d9c565b6001600160a01b0381166115755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610505565b61157e816117e0565b50565b600061158d8284611e40565b9392505050565b600061158d8284611e5f565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c8d65d596040518163ffffffff1660e01b815260040160206040518083038186803b1580156115fc57600080fd5b505afa158015611610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116349190611d00565b90506000600c5460016116479190611e08565b6020850151604086015161165b9085611e5f565b6116659190611e40565b61166f9190611e20565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116cc57600080fd5b505afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190611d00565b61170f906001611e08565b602086015160408701516117239086611e5f565b61172d9190611e40565b6117379190611e20565b905080821061174c5760009350505050610f64565b6117568282611e5f565b9350505050610f64565b6040516001600160a01b0383166024820152604481018290526117c390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611886565b505050565b600061158d8284611e20565b600061158d8284611e08565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818310611841578161158d565b5090919050565b6040516001600160a01b03808516602483015283166044820152606481018290526118809085906323b872dd60e01b9060840161178c565b50505050565b60006118db826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119589092919063ffffffff16565b8051909150156117c357808060200190518101906118f99190611ccc565b6117c35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610505565b6060611967848460008561196f565b949350505050565b6060824710156119d05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610505565b843b611a1e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610505565b600080866001600160a01b03168587604051611a3a9190611d4d565b60006040518083038185875af1925050503d8060008114611a77576040519150601f19603f3d011682016040523d82523d6000602084013e611a7c565b606091505b5091509150611a8c828286611a97565b979650505050505050565b60608315611aa657508161158d565b825115611ab65782518084602001fd5b8160405162461bcd60e51b81526004016105059190611d69565b80356001600160a01b0381168114610f6457600080fd5b60008083601f840112611af8578182fd5b50813567ffffffffffffffff811115611b0f578182fd5b6020830191508360208260051b8501011115611b2a57600080fd5b9250929050565b600060208284031215611b42578081fd5b61158d82611ad0565b60008060408385031215611b5d578081fd5b611b6683611ad0565b946020939093013593505050565b60008060008060008060008060008060008060c08d8f031215611b95578788fd5b67ffffffffffffffff8d351115611baa578788fd5b611bb78e8e358f01611ae7565b909c509a5067ffffffffffffffff60208e01351115611bd4578788fd5b611be48e60208f01358f01611ae7565b909a50985067ffffffffffffffff60408e01351115611c01578788fd5b611c118e60408f01358f01611ae7565b909850965067ffffffffffffffff60608e01351115611c2e578586fd5b611c3e8e60608f01358f01611ae7565b909650945067ffffffffffffffff60808e01351115611c5b578384fd5b611c6b8e60808f01358f01611ae7565b909450925067ffffffffffffffff60a08e01351115611c88578081fd5b611c988e60a08f01358f01611ae7565b81935080925050509295989b509295989b509295989b565b600060208284031215611cc1578081fd5b813561158d81611ed3565b600060208284031215611cdd578081fd5b815161158d81611ed3565b600060208284031215611cf9578081fd5b5035919050565b600060208284031215611d11578081fd5b5051919050565b60008060008060808587031215611d2d578384fd5b505082516020840151604085015160609095015191969095509092509050565b60008251611d5f818460208701611e76565b9190910192915050565b6000602082528251806020840152611d88816040850160208701611e76565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115611e1b57611e1b611ebd565b500190565b600082611e3b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611e5a57611e5a611ebd565b500290565b600082821015611e7157611e71611ebd565b500390565b60005b83811015611e91578181015183820152602001611e79565b838111156118805750506000910152565b6000600019821415611eb657611eb6611ebd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b801515811461157e57600080fdfea2646970667358221220c556c75a033eba36db2dd4bfa21b91833027ffa88ba03d29a5b74c66e78f98c664736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 160,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 53,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13556,
        "contract": "contracts/Staking.sol:Staking",
        "label": "periodFinish",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13559,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardRate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13562,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13564,
        "contract": "contracts/Staking.sol:Staking",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 13566,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 13569,
        "contract": "contracts/Staking.sol:Staking",
        "label": "lockTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 13573,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13577,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewards",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13581,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakeStart",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13585,
        "contract": "contracts/Staking.sol:Staking",
        "label": "migrated",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13594,
        "contract": "contracts/Staking.sol:Staking",
        "label": "startingWeights",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 13599,
        "contract": "contracts/Staking.sol:Staking",
        "label": "legacyStakeAccounts",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(StakeAccount)14456_storage)"
      },
      {
        "astId": 13601,
        "contract": "contracts/Staking.sol:Staking",
        "label": "legacyCarry",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 13603,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 13607,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_balances",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(StakeAccount)14456_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakeAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeAccount)14456_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(StakeAccount)14456_storage": {
        "encoding": "inplace",
        "label": "struct StakeAccount",
        "members": [
          {
            "astId": 14449,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakeAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14451,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakeWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 14453,
            "contract": "contracts/Staking.sol:Staking",
            "label": "cumulativeStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14455,
            "contract": "contracts/Staking.sol:Staking",
            "label": "lockEnd",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}