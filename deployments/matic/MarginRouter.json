{
  "address": "0x2EefefAdEFE3c66D7086c8d3B99247D432383731",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_amm1Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_amm2Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_amm3Factory",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_amm1InitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_amm2InitHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_amm3InitHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_feeBase",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "AccountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "name": "MarginTrade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amm1Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amm1InitHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amm2Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amm2InitHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amm3Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amm3InitHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "amms",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "authorizedSwapExactT4T",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "amms",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "authorizedSwapT4ExactT",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "crossBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crossCloseAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "crossDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crossDepositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "crossOvercollateralizedBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "crossWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "crossWithdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "amms",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "amms",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mswapFeesPer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "amms",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "amms",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4092656034665b6a9a5329f80861d8f90b5a52efb829c8d5e8cb8a8b9e8e01b",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x2EefefAdEFE3c66D7086c8d3B99247D432383731",
    "transactionIndex": 40,
    "gasUsed": "3527967",
    "logsBloom": "0x
    "blockHash": "0xbf4feebc1b01bee9e438a514e4d3c793ac51607f29e35ca063fb05c112dff90e",
    "transactionHash": "0xd4092656034665b6a9a5329f80861d8f90b5a52efb829c8d5e8cb8a8b9e8e01b",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 17671721,
        "transactionHash": "0xd4092656034665b6a9a5329f80861d8f90b5a52efb829c8d5e8cb8a8b9e8e01b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000023292e9ba8434e59e6bac1907ba7425211c4de27",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000dc988b5cbb5000000000000000000000000000000000000000000000000001fd7036792b2349a000000000000000000000000000000000000000000003c47e402e037219d6d910000000000000000000000000000000000000000000000001fc939dedce67f9a000000000000000000000000000000000000000000003c47e410a9bfd7692291",
        "logIndex": 324,
        "blockHash": "0xbf4feebc1b01bee9e438a514e4d3c793ac51607f29e35ca063fb05c112dff90e"
      }
    ],
    "blockNumber": 17671721,
    "cumulativeGasUsed": "16618473",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    "0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0xE7Fb3e833eFE5F9c441105EB65Ef8b261266423B",
    "0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f",
    "0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303",
    "0xf187ed688403aa4f7acfada758d8d53698753b998a3071b06f1b777f4330eaf3",
    9970,
    "0xa94DDbb3Ba629E637F63F54Bae6724c271ccA48f"
  ],
  "solcInputHash": "fd35843ab470d3c36ea3bbd2f8bd3ba5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_amm1Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_amm2Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_amm3Factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_amm1InitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_amm2InitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_amm3InitHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_feeBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"AccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"MarginTrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amm1Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amm1InitHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amm2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amm2InitHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amm3Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amm3InitHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"amms\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"authorizedSwapExactT4T\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"amms\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"authorizedSwapT4ExactT\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"crossBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossCloseAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"crossDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossDepositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"crossOvercollateralizedBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"crossWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"crossWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"amms\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"amms\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mswapFeesPer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"amms\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"amms\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"crossOvercollateralizedBorrow(address,uint256,address,uint256)\":{\"details\":\"caution: the account still has to have a positive balaance at the end of the withdraw. So an underwater account may not be able to withdraw\"}},\"title\":\"Top level transaction controller\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"authorizedSwapExactT4T(uint256,uint256,bytes32,address[])\":{\"notice\":\"make swaps on AMM using protocol funds, only for authorized contracts\"},\"crossBorrow(address,uint256)\":{\"notice\":\"borrow into cross margin trading account\"},\"crossCloseAccount()\":{\"notice\":\"close an account that is no longer borrowing and return gains\"},\"crossDeposit(address,uint256)\":{\"notice\":\"traders call this to deposit funds on cross margin\"},\"crossDepositETH()\":{\"notice\":\"deposit wrapped ehtereum into cross margin account\"},\"crossOvercollateralizedBorrow(address,uint256,address,uint256)\":{\"notice\":\"convenience function to perform overcollateralized borrowing against a cross margin account.\"},\"crossWithdraw(address,uint256)\":{\"notice\":\"withdraw deposits/earnings from cross margin account\"},\"crossWithdrawETH(uint256)\":{\"notice\":\"withdraw ethereum from cross margin account\"},\"swapExactTokensForTokens(uint256,uint256,bytes32,address[],uint256)\":{\"notice\":\"entry point for swapping tokens held in cross margin account\"},\"swapTokensForExactTokens(uint256,uint256,bytes32,address[],uint256)\":{\"notice\":\"entry point for swapping tokens held in cross margin account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarginRouter.sol\":\"MarginRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Base lending behavior\\nabstract contract BaseLending {\\n    uint256 constant FP48 = 2**48;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    uint256 constant hoursPerYear = 365 days / (1 hours);\\n    uint256 constant CHANGE_POINT = 82;\\n    uint256 public normalRatePerPercent =\\n        (FP48 * 12) / hoursPerYear / CHANGE_POINT / 100;\\n    uint256 public highRatePerPercent =\\n        (FP48 * (135 - 12)) / hoursPerYear / (100 - CHANGE_POINT) / 100;\\n\\n    struct YieldAccumulator {\\n        uint256 accumulatorFP;\\n        uint256 lastUpdated;\\n        uint256 hourlyYieldFP;\\n    }\\n\\n    struct LendingMetadata {\\n        uint256 totalLending;\\n        uint256 totalBorrowed;\\n        uint256 lendingCap;\\n        uint256 cumulIncentiveAllocationFP;\\n        uint256 incentiveLastUpdated;\\n        uint256 incentiveEnd;\\n        uint256 incentiveTarget;\\n    }\\n    mapping(address => LendingMetadata) public lendingMeta;\\n\\n    /// @dev accumulate interest per issuer (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    function currentLendingRateFP(uint256 totalLending, uint256 totalBorrowing)\\n        internal\\n        view\\n        returns (uint256 rate)\\n    {\\n        rate = FP48;\\n        uint256 utilizationPercent =\\n            totalLending > 0 ? (100 * totalBorrowing) / totalLending : 0;\\n        if (utilizationPercent < CHANGE_POINT) {\\n            rate += utilizationPercent * normalRatePerPercent;\\n        } else {\\n            rate +=\\n                CHANGE_POINT *\\n                normalRatePerPercent +\\n                (utilizationPercent - CHANGE_POINT) *\\n                highRatePerPercent;\\n        }\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// @dev maximum\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    /// Available tokens to this issuance\\n    function issuanceBalance(address issuance)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x467cbd137ee0bb960a0245e914f8cc0a4425a274a174be66c83b9c02a63899a4\",\"license\":\"BUSL-1.1\"},\"contracts/BaseRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"../libraries/UniswapStyleLib.sol\\\";\\n\\nabstract contract BaseRouter is UniswapStyleLib {\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Trade has expired\\\");\\n        _;\\n    }\\n\\n    // **** SWAP ****\\n    /// @dev requires the initial amount to have already been sent to the first pair\\n    /// and for pairs to be vetted (which getAmountsIn / getAmountsOut do)\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory pairs,\\n        address[] memory tokens,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < pairs.length; i++) {\\n            (address input, address output) = (tokens[i], tokens[i + 1]);\\n            (address token0, ) = UniswapStyleLib.sortTokens(input, output);\\n\\n            uint256 amountOut = amounts[i + 1];\\n\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0\\n                    ? (uint256(0), amountOut)\\n                    : (amountOut, uint256(0));\\n\\n            address to = i < pairs.length - 1 ? pairs[i + 1] : _to;\\n            IUniswapV2Pair pair = IUniswapV2Pair(pairs[i]);\\n\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x03b72d54c72d29201256738cb6b1566baf82bc407e1f331f98c5e3f7183f60d9\",\"license\":\"BUSL-1.1\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Manage funding\\ncontract Fund is RoleAware {\\n    using SafeERC20 for IERC20;\\n    /// wrapped ether\\n    address public immutable WETH;\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    /// Deposit an active token\\n    function deposit(address depositToken, uint256 depositAmount) external {\\n        IERC20(depositToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit token on behalf of `sender`\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized deposit\\\");\\n        IERC20(depositToken).safeTransferFrom(\\n            sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit to wrapped ether\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized withdraw\\\");\\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        Address.sendValue(payable(recipient), withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x519e45c6eaf2492c479b4bfbb75e6060b1114f528db8087c24c01128003d2e23\",\"license\":\"BUSL-1.1\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n    uint256 incentiveAllocationStart;\\n}\\n\\n/// @title Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    mapping(address => YieldAccumulator) hourlyBondYieldAccumulators;\\n\\n    uint256 constant RATE_UPDATE_WINDOW = 10 minutes;\\n    uint256 public withdrawalWindow = 20 minutes;\\n    uint256 constant MAX_HOUR_UPDATE = 4;\\n    // issuer => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    uint256 constant borrowMinAPR = 25;\\n    uint256 constant borrowMinHourlyYield =\\n        FP48 + (borrowMinAPR * FP48) / 1000 / hoursPerYear;\\n\\n    function _makeHourlyBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        addToTotalLending(meta, amount);\\n        updateHourlyBondAmount(issuer, bond, holder);\\n\\n        if (bond.amount == 0) {\\n            bond.moduloHour = block.timestamp % (1 hours);\\n        }\\n        bond.amount += amount;\\n    }\\n\\n    function updateHourlyBondAmount(\\n        address issuer,\\n        HourlyBond storage bond,\\n        address holder\\n    ) internal {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n\\n        YieldAccumulator storage yA =\\n            getUpdatedHourlyYield(\\n                issuer,\\n                hourlyBondYieldAccumulators[issuer],\\n                RATE_UPDATE_WINDOW\\n            );\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n\\n        if (yieldQuotientFP > 0) {\\n            disburseIncentive(bond, meta, holder);\\n            uint256 oldAmount = bond.amount;\\n\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            addToTotalLending(meta, deltaAmount);\\n        } else {\\n            bond.incentiveAllocationStart = meta.cumulIncentiveAllocationFP;\\n        }\\n        bond.yieldQuotientFP = yA.accumulatorFP;\\n    }\\n\\n    // Retrieves bond balance for issuer and holder\\n    function viewHourlyBondAmount(address issuer, address holder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n\\n        uint256 cumulativeYield =\\n            viewCumulativeYieldFP(\\n                hourlyBondYieldAccumulators[issuer],\\n                block.timestamp\\n            );\\n\\n        if (yieldQuotientFP > 0) {\\n            return applyInterest(bond.amount, cumulativeYield, yieldQuotientFP);\\n        } else {\\n            return bond.amount;\\n        }\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address issuer,\\n        HourlyBond storage bond,\\n        uint256 amount,\\n        address holder\\n    ) internal {\\n        subtractFromTotalLending(lendingMeta[issuer], amount);\\n        updateHourlyBondAmount(issuer, bond, holder);\\n\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        bond.amount -= amount;\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            yieldAccumulator.accumulatorFP +\\n            (yieldAccumulator.accumulatorFP *\\n                (yieldAccumulator.hourlyYieldFP - FP48) *\\n                secondsDelta) /\\n            (FP48 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            uint256 accumulatorBeforeFP = accumulatorFP;\\n            for (uint256 i = 0; hoursDelta > i && MAX_HOUR_UPDATE > i; i++) {\\n                // FP48 * FP48 / FP48 = FP48\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP48;\\n            }\\n\\n            // a lot of time has passed\\n            if (hoursDelta > MAX_HOUR_UPDATE) {\\n                // apply interest in non-compounding way\\n                accumulatorFP +=\\n                    ((accumulatorFP - accumulatorBeforeFP) *\\n                        (hoursDelta - MAX_HOUR_UPDATE)) /\\n                    MAX_HOUR_UPDATE;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    /// issuer address represents a token\\n    function updateHourlyYield(address issuer)\\n        public\\n        returns (uint256 hourlyYield)\\n    {\\n        return\\n            getUpdatedHourlyYield(\\n                issuer,\\n                hourlyBondYieldAccumulators[issuer],\\n                RATE_UPDATE_WINDOW\\n            )\\n                .hourlyYieldFP;\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(\\n        address issuer,\\n        YieldAccumulator storage accumulator,\\n        uint256 window\\n    ) internal returns (YieldAccumulator storage) {\\n        uint256 lastUpdated = accumulator.lastUpdated;\\n        uint256 timeDelta = (block.timestamp - lastUpdated);\\n\\n        if (timeDelta > window) {\\n            YieldAccumulator storage borrowAccumulator =\\n                borrowYieldAccumulators[issuer];\\n\\n            accumulator.accumulatorFP = calcCumulativeYieldFP(\\n                accumulator,\\n                timeDelta\\n            );\\n\\n            LendingMetadata storage meta = lendingMeta[issuer];\\n\\n            accumulator.hourlyYieldFP = currentLendingRateFP(\\n                meta.totalLending,\\n                meta.totalBorrowed\\n            );\\n            accumulator.lastUpdated = block.timestamp;\\n\\n            updateBorrowYieldAccu(borrowAccumulator);\\n\\n            borrowAccumulator.hourlyYieldFP = max(\\n                borrowMinHourlyYield,\\n                FP48 +\\n                    (borrowingFactorPercent *\\n                        (accumulator.hourlyYieldFP - FP48)) /\\n                    100\\n            );\\n        }\\n\\n        return accumulator;\\n    }\\n\\n    function updateBorrowYieldAccu(YieldAccumulator storage borrowAccumulator)\\n        internal\\n    {\\n        uint256 timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n\\n        if (timeDelta > RATE_UPDATE_WINDOW) {\\n            borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n                borrowAccumulator,\\n                timeDelta\\n            );\\n\\n            borrowAccumulator.lastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    function getUpdatedBorrowYieldAccuFP(address issuer)\\n        external\\n        returns (uint256)\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        updateBorrowYieldAccu(yA);\\n        return yA.accumulatorFP;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        YieldAccumulator storage yA,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yA.lastUpdated);\\n        if (timeDelta > RATE_UPDATE_WINDOW) {\\n            return calcCumulativeYieldFP(yA, timeDelta);\\n        } else {\\n            return yA.accumulatorFP;\\n        }\\n    }\\n\\n    function viewYearlyIncentivePer10k(address token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        if (\\n            meta.incentiveEnd < block.timestamp ||\\n            meta.incentiveLastUpdated > meta.incentiveEnd\\n        ) {\\n            return 0;\\n        } else {\\n            uint256 timeDelta = meta.incentiveEnd - meta.incentiveLastUpdated;\\n\\n            // scale to 1 year\\n            return\\n                (10_000 * (365 days) * meta.incentiveTarget) /\\n                (1 + meta.totalLending * timeDelta);\\n        }\\n    }\\n\\n    function updateIncentiveAllocation(LendingMetadata storage meta) internal {\\n        uint256 endTime = min(meta.incentiveEnd, block.timestamp);\\n        if (meta.incentiveTarget > 0 && endTime > meta.incentiveLastUpdated) {\\n            uint256 timeDelta = endTime - meta.incentiveLastUpdated;\\n            uint256 targetDelta =\\n                min(\\n                    meta.incentiveTarget,\\n                    (timeDelta * meta.incentiveTarget) /\\n                        (meta.incentiveEnd - meta.incentiveLastUpdated)\\n                );\\n            meta.incentiveTarget -= targetDelta;\\n            meta.cumulIncentiveAllocationFP +=\\n                (targetDelta * FP48) /\\n                (1 + meta.totalLending);\\n            meta.incentiveLastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    function addToTotalLending(LendingMetadata storage meta, uint256 amount)\\n        internal\\n    {\\n        updateIncentiveAllocation(meta);\\n        meta.totalLending += amount;\\n    }\\n\\n    function subtractFromTotalLending(\\n        LendingMetadata storage meta,\\n        uint256 amount\\n    ) internal {\\n        updateIncentiveAllocation(meta);\\n        meta.totalLending -= amount;\\n    }\\n\\n    function disburseIncentive(\\n        HourlyBond storage bond,\\n        LendingMetadata storage meta,\\n        address holder\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xafb76eedcd91bcd0efde4b8db1a38abb73c1f2db8ed960a59348e33fe51031cc\",\"license\":\"BUSL-1.1\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"../libraries/IncentiveReporter.sol\\\";\\n\\n// TODO activate bonds for lending\\n\\n/// @title Manage lending for a variety of bond issuers\\ncontract Lending is RoleAware, HourlyBondSubscriptionLending {\\n    /// mapping issuers to tokens\\n    /// (in crossmargin, the issuers are tokens  themselves)\\n    mapping(address => address) public issuerTokens;\\n\\n    /// In case of shortfall, adjust debt\\n    mapping(address => uint256) public haircuts;\\n\\n    /// map of available issuers\\n    mapping(address => bool) public activeIssuers;\\n\\n    uint256 constant BORROW_RATE_UPDATE_WINDOW = 60 minutes;\\n\\n    address public immutable MFI;\\n\\n    constructor(address _MFI, address _roles) RoleAware(_roles) {\\n        MFI = _MFI;\\n    }\\n\\n    /// Make a issuer available for protocol\\n    function activateIssuer(address issuer) external {\\n        activateIssuer(issuer, issuer);\\n    }\\n\\n    /// Make issuer != token available for protocol (isol. margin)\\n    function activateIssuer(address issuer, address token)\\n        public\\n        onlyOwnerExecActivator\\n    {\\n        activeIssuers[issuer] = true;\\n        issuerTokens[issuer] = token;\\n    }\\n\\n    /// Remove a issuer from trading availability\\n    function deactivateIssuer(address issuer) external onlyOwnerExecActivator {\\n        activeIssuers[issuer] = false;\\n    }\\n\\n    /// Set lending cap\\n    function setLendingCap(address issuer, uint256 cap)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        lendingMeta[issuer].lendingCap = cap;\\n    }\\n\\n    /// Set withdrawal window\\n    function setWithdrawalWindow(uint256 window) external onlyOwnerExec {\\n        withdrawalWindow = window;\\n    }\\n\\n    function setNormalRatePerPercent(uint256 rate) external onlyOwnerExec {\\n        normalRatePerPercent = rate;\\n    }\\n\\n    function setHighRatePerPercent(uint256 rate) external onlyOwnerExec {\\n        highRatePerPercent = rate;\\n    }\\n\\n    /// Set hourly yield APR for issuer\\n    function setHourlyYieldAPR(address issuer, uint256 aprPercent)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        YieldAccumulator storage yieldAccumulator =\\n            hourlyBondYieldAccumulators[issuer];\\n\\n        if (yieldAccumulator.accumulatorFP == 0) {\\n            uint256 yieldFP = FP48 + (FP48 * aprPercent) / 100 / (24 * 365);\\n            hourlyBondYieldAccumulators[issuer] = YieldAccumulator({\\n                accumulatorFP: FP48,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: yieldFP\\n            });\\n        } else {\\n            YieldAccumulator storage yA =\\n                getUpdatedHourlyYield(\\n                    issuer,\\n                    yieldAccumulator,\\n                    RATE_UPDATE_WINDOW\\n                );\\n            yA.hourlyYieldFP = (FP48 * (100 + aprPercent)) / 100 / (24 * 365);\\n        }\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest, uint256 accumulatorFP) {\\n        require(isBorrower(msg.sender), \\\"Not approved call\\\");\\n\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        updateBorrowYieldAccu(yA);\\n        accumulatorFP = yA.accumulatorFP;\\n\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += deltaAmount;\\n    }\\n\\n    /// @dev view function to get balance with borrowing interest applied\\n    function viewWithBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                borrowYieldAccumulators[issuer],\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows issuers\\n    function registerBorrow(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not approved borrower\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += amount;\\n\\n        getUpdatedHourlyYield(\\n            issuer,\\n            hourlyBondYieldAccumulators[issuer],\\n            BORROW_RATE_UPDATE_WINDOW\\n        );\\n\\n        require(\\n            meta.totalLending >= meta.totalBorrowed,\\n            \\\"Insufficient lending\\\"\\n        );\\n    }\\n\\n    /// @dev gets called when external sources provide lending\\n    function registerLend(address issuer, uint256 amount) external {\\n        require(isLender(msg.sender), \\\"Not an approved lender\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        addToTotalLending(meta, amount);\\n\\n        getUpdatedHourlyYield(\\n            issuer,\\n            hourlyBondYieldAccumulators[issuer],\\n            RATE_UPDATE_WINDOW\\n        );\\n    }\\n\\n    /// @dev gets called when external sources pay withdraw their bobnd\\n    function registerWithdrawal(address issuer, uint256 amount) external {\\n        require(isLender(msg.sender), \\\"Not an approved lender\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        subtractFromTotalLending(meta, amount);\\n\\n        getUpdatedHourlyYield(\\n            issuer,\\n            hourlyBondYieldAccumulators[issuer],\\n            RATE_UPDATE_WINDOW\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not approved borrower\\\");\\n        lendingMeta[issuer].totalBorrowed -= amount;\\n    }\\n\\n    /// @dev get the borrow yield for a specific issuer/token\\n    function viewAccumulatedBorrowingYieldFP(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        return viewCumulativeYieldFP(yA, block.timestamp);\\n    }\\n\\n    function viewAPRPer10k(YieldAccumulator storage yA)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 hourlyYieldFP = yA.hourlyYieldFP;\\n\\n        uint256 aprFP =\\n            ((hourlyYieldFP * 10_000 - FP48 * 10_000) * 365 days) / (1 hours);\\n\\n        return aprFP / FP48;\\n    }\\n\\n    /// @dev get current borrowing interest per 10k for a token / issuer\\n    function viewBorrowAPRPer10k(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return viewAPRPer10k(borrowYieldAccumulators[issuer]);\\n    }\\n\\n    /// @dev get current lending APR per 10k for a token / issuer\\n    function viewHourlyBondAPRPer10k(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return viewAPRPer10k(hourlyBondYieldAccumulators[issuer]);\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function makeFallbackBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) external {\\n        require(isLender(msg.sender), \\\"Not an approved lender\\\");\\n        _makeHourlyBond(issuer, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address issuer, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n        super._withdrawHourlyBond(issuer, bond, amount, msg.sender);\\n\\n        if (bond.amount == 0) {\\n            delete hourlyBondAccounts[issuer][msg.sender];\\n        }\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        IncentiveReporter.subtractFromClaimAmount(issuer, msg.sender, amount);\\n    }\\n\\n    /// Shut down hourly bond account for `issuer`\\n    function closeHourlyBondAccount(address issuer) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n\\n        uint256 amount = bond.amount;\\n        super._withdrawHourlyBond(issuer, bond, amount, msg.sender);\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        delete hourlyBondAccounts[issuer][msg.sender];\\n\\n        IncentiveReporter.subtractFromClaimAmount(issuer, msg.sender, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address issuer, uint256 amount)\\n        external\\n    {\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n\\n        collectToken(issuer, msg.sender, amount);\\n\\n        super._makeHourlyBond(issuer, msg.sender, amount);\\n\\n        IncentiveReporter.addToClaimAmount(issuer, msg.sender, amount);\\n    }\\n\\n    function initBorrowYieldAccumulator(address issuer)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        require(yA.accumulatorFP == 0, \\\"don't re-initialize\\\");\\n\\n        yA.accumulatorFP = FP48;\\n        yA.lastUpdated = block.timestamp;\\n        yA.hourlyYieldFP = FP48 + (FP48 * borrowMinAPR) / 1000 / (365 * 24);\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwnerExec\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n\\n    function issuanceBalance(address issuer)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address token = issuerTokens[issuer];\\n        if (token == issuer) {\\n            // cross margin\\n            return IERC20(token).balanceOf(fund());\\n        } else {\\n            return lendingMeta[issuer].totalLending - haircuts[issuer];\\n        }\\n    }\\n\\n    function disburse(\\n        address issuer,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 haircutAmount = haircuts[issuer];\\n        if (haircutAmount > 0 && amount > 0) {\\n            uint256 totalLending = lendingMeta[issuer].totalLending;\\n            uint256 adjustment =\\n                (amount * min(totalLending, haircutAmount)) / totalLending;\\n            amount = amount - adjustment;\\n            haircuts[issuer] -= adjustment;\\n        }\\n\\n        address token = issuerTokens[issuer];\\n        Fund(fund()).withdraw(token, recipient, amount);\\n    }\\n\\n    function collectToken(\\n        address issuer,\\n        address source,\\n        uint256 amount\\n    ) internal {\\n        Fund(fund()).depositFor(source, issuerTokens[issuer], amount);\\n    }\\n\\n    function haircut(uint256 amount) external {\\n        haircuts[msg.sender] += amount;\\n    }\\n\\n    function addIncentive(\\n        address token,\\n        uint256 amount,\\n        uint256 endTimestamp\\n    ) external onlyOwnerExecActivator {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        meta.incentiveEnd = endTimestamp;\\n        meta.incentiveTarget = amount;\\n        meta.incentiveLastUpdated = block.timestamp;\\n    }\\n\\n    function disburseIncentive(\\n        HourlyBond storage bond,\\n        LendingMetadata storage meta,\\n        address holder\\n    ) internal override {\\n        uint256 allocationDelta =\\n            meta.cumulIncentiveAllocationFP - bond.incentiveAllocationStart;\\n        if (allocationDelta > 0) {\\n            uint256 disburseAmount = (allocationDelta * bond.amount) / FP48;\\n            Fund(fund()).withdraw(MFI, holder, disburseAmount);\\n            bond.incentiveAllocationStart += allocationDelta;\\n        }\\n    }\\n\\n    function withdrawIncentive(address token) external {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        updateIncentiveAllocation(meta);\\n        disburseIncentive(\\n            hourlyBondAccounts[token][msg.sender],\\n            meta,\\n            msg.sender\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x84b6df0355ccf75e0e0a04bed30104bde9395ea8d2eb47baacc6b95a6802d48b\",\"license\":\"BUSL-1.1\"},\"contracts/MarginRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"../interfaces/IMarginTrading.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./BaseRouter.sol\\\";\\nimport \\\"../libraries/IncentiveReporter.sol\\\";\\n\\n/// @title Top level transaction controller\\ncontract MarginRouter is RoleAware, BaseRouter {\\n    event AccountUpdated(address indexed trader);\\n    event MarginTrade(\\n        address indexed trader,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    );\\n\\n    uint256 public constant mswapFeesPer10k = 10;\\n    address public immutable WETH;\\n\\n    constructor(\\n        address _WETH,\\n        address _amm1Factory,\\n        address _amm2Factory,\\n        address _amm3Factory,\\n        bytes32 _amm1InitHash,\\n        bytes32 _amm2InitHash,\\n        bytes32 _amm3InitHash,\\n        uint256 _feeBase,\\n        address _roles\\n    )\\n        UniswapStyleLib(\\n            _amm1Factory,\\n            _amm2Factory,\\n            _amm3Factory,\\n            _amm1InitHash,\\n            _amm2InitHash,\\n            _amm3InitHash,\\n            _feeBase\\n        )\\n        RoleAware(_roles)\\n    {\\n        WETH = _WETH;\\n    }\\n\\n    ///////////////////////////\\n    // Cross margin endpoints\\n    ///////////////////////////\\n\\n    /// @notice traders call this to deposit funds on cross margin\\n    function crossDeposit(address depositToken, uint256 depositAmount)\\n        external\\n    {\\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\\n\\n        uint256 extinguishAmount =\\n            IMarginTrading(crossMarginTrading()).registerDeposit(\\n                msg.sender,\\n                depositToken,\\n                depositAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(depositToken, extinguishAmount);\\n            IncentiveReporter.subtractFromClaimAmount(\\n                depositToken,\\n                msg.sender,\\n                extinguishAmount\\n            );\\n        }\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice deposit wrapped ehtereum into cross margin account\\n    function crossDepositETH() external payable {\\n        Fund(fund()).depositToWETH{value: msg.value}();\\n        uint256 extinguishAmount =\\n            IMarginTrading(crossMarginTrading()).registerDeposit(\\n                msg.sender,\\n                WETH,\\n                msg.value\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(WETH, extinguishAmount);\\n            IncentiveReporter.subtractFromClaimAmount(\\n                WETH,\\n                msg.sender,\\n                extinguishAmount\\n            );\\n        }\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice withdraw deposits/earnings from cross margin account\\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\\n        external\\n    {\\n        IMarginTrading(crossMarginTrading()).registerWithdrawal(\\n            msg.sender,\\n            withdrawToken,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount);\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice withdraw ethereum from cross margin account\\n    function crossWithdrawETH(uint256 withdrawAmount) external {\\n        IMarginTrading(crossMarginTrading()).registerWithdrawal(\\n            msg.sender,\\n            WETH,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice borrow into cross margin trading account\\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\\n        IMarginTrading(crossMarginTrading()).registerBorrow(\\n            msg.sender,\\n            borrowToken,\\n            borrowAmount\\n        );\\n        Lending(lending()).updateHourlyYield(borrowToken);\\n\\n        IncentiveReporter.addToClaimAmount(\\n            borrowToken,\\n            msg.sender,\\n            borrowAmount\\n        );\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice convenience function to perform overcollateralized borrowing\\n    /// against a cross margin account.\\n    /// @dev caution: the account still has to have a positive balaance at the end\\n    /// of the withdraw. So an underwater account may not be able to withdraw\\n    function crossOvercollateralizedBorrow(\\n        address depositToken,\\n        uint256 depositAmount,\\n        address borrowToken,\\n        uint256 withdrawAmount\\n    ) external {\\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\\n\\n        Lending(lending()).registerBorrow(borrowToken, withdrawAmount);\\n        IMarginTrading(crossMarginTrading()).registerOvercollateralizedBorrow(\\n            msg.sender,\\n            depositToken,\\n            depositAmount,\\n            borrowToken,\\n            withdrawAmount\\n        );\\n        Lending(lending()).updateHourlyYield(borrowToken);\\n\\n        Fund(fund()).withdraw(borrowToken, msg.sender, withdrawAmount);\\n        IncentiveReporter.addToClaimAmount(\\n            borrowToken,\\n            msg.sender,\\n            withdrawAmount\\n        );\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice close an account that is no longer borrowing and return gains\\n    function crossCloseAccount() external {\\n        (address[] memory holdingTokens, uint256[] memory holdingAmounts) =\\n            IMarginTrading(crossMarginTrading()).getHoldingAmounts(msg.sender);\\n\\n        // requires all debts paid off\\n        IMarginTrading(crossMarginTrading()).registerLiquidation(msg.sender);\\n\\n        for (uint256 i; holdingTokens.length > i; i++) {\\n            Fund(fund()).withdraw(\\n                holdingTokens[i],\\n                msg.sender,\\n                holdingAmounts[i]\\n            );\\n        }\\n\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice entry point for swapping tokens held in cross margin account\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees = takeFeesFromInput(amountIn);\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsOut(\\n            amountIn - fees,\\n            amms,\\n            tokens\\n        );\\n\\n        // checks that trader is within allowed lending bounds\\n        registerTrade(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            amountIn,\\n            amounts[amounts.length - 1]\\n        );\\n\\n        _fundSwapExactT4T(amounts, amountOutMin, pairs, tokens);\\n    }\\n\\n    /// @notice entry point for swapping tokens held in cross margin account\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsIn(\\n            amountOut + takeFeesFromOutput(amountOut),\\n            amms,\\n            tokens\\n        );\\n\\n        // checks that trader is within allowed lending bounds\\n        registerTrade(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            amounts[0],\\n            amountOut\\n        );\\n\\n        _fundSwapT4ExactT(amounts, amountInMax, pairs, tokens);\\n    }\\n\\n    /// @dev helper function does all the work of telling other contracts\\n    /// about a cross margin trade\\n    function registerTrade(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        (uint256 extinguishAmount, uint256 borrowAmount) =\\n            IMarginTrading(crossMarginTrading()).registerTradeAndBorrow(\\n                trader,\\n                inToken,\\n                outToken,\\n                inAmount,\\n                outAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(outToken, extinguishAmount);\\n            Lending(lending()).updateHourlyYield(outToken);\\n            IncentiveReporter.subtractFromClaimAmount(\\n                outToken,\\n                trader,\\n                extinguishAmount\\n            );\\n        }\\n        if (borrowAmount > 0) {\\n            Lending(lending()).registerBorrow(inToken, borrowAmount);\\n            Lending(lending()).updateHourlyYield(inToken);\\n            IncentiveReporter.addToClaimAmount(inToken, trader, borrowAmount);\\n        }\\n\\n        emit AccountUpdated(trader);\\n        emit MarginTrade(trader, inToken, outToken, inAmount, outAmount);\\n    }\\n\\n    /////////////\\n    // Helpers\\n    /////////////\\n\\n    /// @dev internal helper swapping exact token for token on AMM\\n    function _fundSwapExactT4T(\\n        uint256[] memory amounts,\\n        uint256 amountOutMin,\\n        address[] memory pairs,\\n        address[] calldata tokens\\n    ) internal {\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, fund());\\n    }\\n\\n    /// @notice make swaps on AMM using protocol funds, only for authorized contracts\\n    function authorizedSwapExactT4T(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external returns (uint256[] memory amounts) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsOut(\\n            amountIn,\\n            amms,\\n            tokens\\n        );\\n        _fundSwapExactT4T(amounts, amountOutMin, pairs, tokens);\\n    }\\n\\n    // @dev internal helper swapping exact token for token on on AMM\\n    function _fundSwapT4ExactT(\\n        uint256[] memory amounts,\\n        uint256 amountInMax,\\n        address[] memory pairs,\\n        address[] calldata tokens\\n    ) internal {\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"MarginRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, fund());\\n    }\\n\\n    //// @notice swap protocol funds on AMM, only for authorized\\n    function authorizedSwapT4ExactT(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external returns (uint256[] memory amounts) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsIn(\\n            amountOut,\\n            amms,\\n            tokens\\n        );\\n        _fundSwapT4ExactT(amounts, amountInMax, pairs, tokens);\\n    }\\n\\n    function takeFeesFromOutput(uint256 amount)\\n        internal\\n        pure\\n        returns (uint256 fees)\\n    {\\n        fees = (mswapFeesPer10k * amount) / 10_000;\\n    }\\n\\n    function takeFeesFromInput(uint256 amount)\\n        internal\\n        pure\\n        returns (uint256 fees)\\n    {\\n        fees = (mswapFeesPer10k * amount) / (10_000 + mswapFeesPer10k);\\n    }\\n\\n    function getAmountsOut(\\n        uint256 inAmount,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external view returns (uint256[] memory amounts) {\\n        (amounts, ) = UniswapStyleLib._getAmountsOut(inAmount, amms, tokens);\\n    }\\n\\n    function getAmountsIn(\\n        uint256 outAmount,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external view returns (uint256[] memory amounts) {\\n        (amounts, ) = UniswapStyleLib._getAmountsIn(outAmount, amms, tokens);\\n    }\\n}\\n\",\"keccak256\":\"0x713c921462bc0216b313e45a1221f7b5697e64726c699726a09bc242d4866b32\",\"license\":\"BUSL-1.1\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isTokenActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return mainCharacterCache[DISABLER];\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function marginRouter() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_ROUTER];\\n    }\\n\\n    function crossMarginTrading() internal view returns (address) {\\n        return mainCharacterCache[CROSS_MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function tokenAdmin() internal view returns (address) {\\n        return mainCharacterCache[TOKEN_ADMIN];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roleCache[contr][STAKE_PENALIZER];\\n    }\\n\\n    function isLender(address contr) internal view returns (bool) {\\n        return roleCache[contr][LENDER];\\n    }\\n}\\n\",\"keccak256\":\"0xe4634706debd8661e0488404fe7e0b2d4c41f161784e2d098b8253d57267036c\",\"license\":\"BUSL-1.1\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MARGIN_CALLER = 2;\\nuint256 constant BORROWER = 3;\\nuint256 constant MARGIN_TRADER = 4;\\nuint256 constant FEE_SOURCE = 5;\\nuint256 constant LIQUIDATOR = 6;\\nuint256 constant AUTHORIZED_FUND_TRADER = 7;\\nuint256 constant INCENTIVE_REPORTER = 8;\\nuint256 constant TOKEN_ACTIVATOR = 9;\\nuint256 constant STAKE_PENALIZER = 10;\\nuint256 constant LENDER = 11;\\n\\nuint256 constant FUND = 101;\\nuint256 constant LENDING = 102;\\nuint256 constant MARGIN_ROUTER = 103;\\nuint256 constant CROSS_MARGIN_TRADING = 104;\\nuint256 constant FEE_CONTROLLER = 105;\\nuint256 constant PRICE_CONTROLLER = 106;\\nuint256 constant ADMIN = 107;\\nuint256 constant INCENTIVE_DISTRIBUTION = 108;\\nuint256 constant TOKEN_ADMIN = 109;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][TOKEN_ACTIVATOR] = true;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ba8d9671c7dd24ae361f1531b6fa8f10af7a8a47a38c27eb0a3fe8fc1e23ae7\",\"license\":\"BUSL-1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IMarginTrading {\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 extinguishAmount);\\n\\n    function registerWithdrawal(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerBorrow(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) external returns (uint256 extinguishAmount, uint256 borrowAmount);\\n\\n    function registerOvercollateralizedBorrow(\\n        address trader,\\n        address depositToken,\\n        uint256 depositAmount,\\n        address borrowToken,\\n        uint256 withdrawAmount\\n    ) external;\\n\\n    function registerLiquidation(address trader) external;\\n\\n    function getHoldingAmounts(address trader)\\n        external\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n        );\\n\\n    function getBorrowAmounts(address trader)\\n        external\\n        view\\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts);\\n}\\n\",\"keccak256\":\"0x973bc425f38651bd78c2cd4371d0a24b456117718bc3540c122bc81197197113\",\"license\":\"BUSL-1.1\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"},\"libraries/IncentiveReporter.sol\":{\"content\":\"library IncentiveReporter {\\n    event AddToClaim(address topic, address indexed claimant, uint256 amount);\\n    event SubtractFromClaim(\\n        address topic,\\n        address indexed claimant,\\n        uint256 amount\\n    );\\n\\n    /// Start / increase amount of claim\\n    function addToClaimAmount(\\n        address topic,\\n        address recipient,\\n        uint256 claimAmount\\n    ) internal {\\n        emit AddToClaim(topic, recipient, claimAmount);\\n    }\\n\\n    /// Decrease amount of claim\\n    function subtractFromClaimAmount(\\n        address topic,\\n        address recipient,\\n        uint256 subtractAmount\\n    ) internal {\\n        emit SubtractFromClaim(topic, recipient, subtractAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x2d53de9eb9d9b405eff6e0db45de45b02013d4a528b483fd57d19cccc52085f3\"},\"libraries/UniswapStyleLib.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract UniswapStyleLib {\\n    address public immutable amm1Factory;\\n    address public immutable amm2Factory;\\n    address public immutable amm3Factory;\\n    bytes32 public amm1InitHash;\\n    bytes32 public amm2InitHash;\\n    bytes32 public amm3InitHash;\\n    uint256 public immutable feeBase;\\n\\n    constructor(\\n        address _amm1Factory,\\n        address _amm2Factory,\\n        address _amm3Factory,\\n        bytes32 _amm1InitHash,\\n        bytes32 _amm2InitHash,\\n        bytes32 _amm3InitHash,\\n        uint256 _feeBase\\n    ) {\\n        amm1Factory = _amm1Factory;\\n        amm2Factory = _amm2Factory;\\n        amm3Factory = _amm3Factory;\\n        amm1InitHash = _amm1InitHash;\\n        amm2InitHash = _amm2InitHash;\\n        amm3InitHash = _amm3InitHash;\\n        feeBase = _feeBase;\\n    }\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Identical address!\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Zero address!\\\");\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pair).getReserves();\\n\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * feeBase;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 10_000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 10_000;\\n\\n        uint256 denominator = (reserveOut - amountOut) * feeBase;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function _getAmountsOut(\\n        uint256 amountIn,\\n        bytes32 amms,\\n        address[] memory tokens\\n    ) internal view returns (uint256[] memory amounts, address[] memory pairs) {\\n        require(tokens.length >= 2, \\\"token path too short\\\");\\n\\n        amounts = new uint256[](tokens.length);\\n        amounts[0] = amountIn;\\n\\n        pairs = new address[](tokens.length - 1);\\n\\n        for (uint256 i; i < tokens.length - 1; i++) {\\n            address inToken = tokens[i];\\n            address outToken = tokens[i + 1];\\n\\n            address pair =\\n                amms[i] == 0\\n                    ? pairForAMM1(inToken, outToken)\\n                    : (amms[i] == 0x01\\n                       ? pairForAMM2(inToken, outToken)\\n                       : pairForAMM3(inToken, outToken));\\n            pairs[i] = pair;\\n\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(pair, inToken, outToken);\\n\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function _getAmountsIn(\\n        uint256 amountOut,\\n        bytes32 amms,\\n        address[] memory tokens\\n    ) internal view returns (uint256[] memory amounts, address[] memory pairs) {\\n        require(tokens.length >= 2, \\\"token path too short\\\");\\n\\n        amounts = new uint256[](tokens.length);\\n        amounts[amounts.length - 1] = amountOut;\\n\\n        pairs = new address[](tokens.length - 1);\\n\\n        for (uint256 i = tokens.length - 1; i > 0; i--) {\\n            address inToken = tokens[i - 1];\\n            address outToken = tokens[i];\\n\\n            address pair =\\n                amms[i - 1] == 0\\n                    ? pairForAMM1(inToken, outToken)\\n                    : (amms[i -1 ] == 0x01\\n                       ? pairForAMM2(inToken, outToken)\\n                       : pairForAMM3(inToken, outToken));\\n            pairs[i - 1] = pair;\\n\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(pair, inToken, outToken);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairForAMM1(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address pair)\\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            amm1Factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            amm1InitHash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function pairForAMM2(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address pair)\\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            amm2Factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            amm2InitHash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function pairForAMM3(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address pair)\\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            amm3Factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            amm3InitHash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcffd7f839c6e74b8fa56cdd47677a391df07f6ba2f83ca87c0d1adcf14cfe8e7\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200402138038062004021833981016040819052620000359162000115565b87878787878787876001600160a01b038116620000a35760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b6001600160601b0319606091821b811660805297811b881660a05295861b871660c05293851b861660e052600292909255600355600455610100529990991b9098166101205250620001ab9650505050505050565b80516001600160a01b03811681146200011057600080fd5b919050565b60008060008060008060008060006101208a8c03121562000134578485fd5b6200013f8a620000f8565b98506200014f60208b01620000f8565b97506200015f60408b01620000f8565b96506200016f60608b01620000f8565b955060808a0151945060a08a0151935060c08a0151925060e08a015191506200019c6101008b01620000f8565b90509295985092959850929598565b60805160601c60a05160601c60c05160601c60e05160601c610100516101205160601c613dca620002576000396000818161042c01528181610b260152818161134f0152818161144801526114ba0152600081816103e20152818161329501526136190152600081816104d40152612e7a0152600081816101c30152612f7001526000818161048001526130450152600081816102e6015281816105e70152610d890152613dca6000f3fe6080604052600436106101ac5760003560e01c806394427b20116100ec578063db4292351161008a578063e3e0626b11610064578063e3e0626b14610522578063e3ee432714610542578063e9c3f77d14610562578063eedb97c714610598576101ac565b8063db429235146104c2578063df7c20f9146104f6578063e2abb5c41461050c576101ac565b8063ad5c4648116100c6578063ad5c46481461041a578063b7453e271461044e578063b852eb0d1461046e578063cb6067dd146104a2576101ac565b806394427b20146103c857806395e911a8146103d0578063a75208a814610404576101ac565b8063351ae6101161015957806353d7ff9f1161013357806353d7ff9f146103285780636969867014610348578063799d34e11461035d5780637a1a04df1461037d576101ac565b8063351ae610146102b4578063392f5f64146102d4578063447d52ba14610308576101ac565b80631084bd6d1161018a5780631084bd6d146102515780631306d902146102745780631dce3baa14610294576101ac565b8063059b157a146101b1578063071060a6146102025780630abb674c14610224575b600080fd5b3480156101bd57600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020e57600080fd5b5061022261021d366004613a0c565b6105b8565b005b34801561023057600080fd5b5061024461023f366004613b3e565b6106af565b6040516101f99190613ba5565b34801561025d57600080fd5b50610266600a81565b6040519081526020016101f9565b34801561028057600080fd5b5061022261028f366004613866565b61082e565b3480156102a057600080fd5b506102226102af366004613a0c565b610abb565b3480156102c057600080fd5b506102446102cf366004613adf565b610c71565b3480156102e057600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b34801561031457600080fd5b50610222610323366004613a3c565b610d4a565b34801561033457600080fd5b50610244610343366004613adf565b610e59565b34801561035457600080fd5b50610222610f28565b34801561036957600080fd5b50610244610378366004613a6b565b611214565b34801561038957600080fd5b506103b8610398366004613866565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101f9565b610222611254565b3480156103dc57600080fd5b506102667f000000000000000000000000000000000000000000000000000000000000000081565b34801561041057600080fd5b5061026660025481565b34801561042657600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b34801561045a57600080fd5b50610244610469366004613a6b565b61150e565b34801561047a57600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ae57600080fd5b506102226104bd366004613891565b61154e565b3480156104ce57600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b34801561050257600080fd5b5061026660035481565b34801561051857600080fd5b5061026660045481565b34801561052e57600080fd5b5061022261053d366004613866565b61193f565b34801561054e57600080fd5b5061024461055d366004613b3e565b611ade565b34801561056e57600080fd5b506101e561057d366004613a0c565b6000602081905290815260409020546001600160a01b031681565b3480156105a457600080fd5b506102226105b3366004613866565b611c47565b6040517fb4ed0b6d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561063157600080fd5b505afa158015610645573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610669919061384a565b60009182526020829052604090912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055565b606081428110156107075760405162461bcd60e51b815260206004820152601160248201527f547261646520686173206578706972656400000000000000000000000000000060448201526064015b60405180910390fd5b600061071289611eb7565b9050606061075d610723838c613d07565b89898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ee192505050565b909450905061081433888860008161078557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061079a9190613827565b89896107a7600182613d07565b8181106107c457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107d99190613827565b8d8860018a516107e99190613d07565b8151811061080757634e487b7160e01b600052603260045260246000fd5b6020026020010151612237565b610821848a838a8a6126df565b5050509695505050505050565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fb3db428b0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052919091169063b3db428b90606401600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b505050506000610923606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517f52a664d90000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0385811660248301526044820185905291909116906352a664d990606401602060405180830381600087803b15801561098e57600080fd5b505af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c69190613a24565b90508015610a8b57606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517f2a6a897b0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018490529190911690632a6a897b90604401600060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b50505050610a8b83338361295c565b60405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a2505050565b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b03166040517fd0eb66530000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201849052919091169063d0eb665390606401600060405180830381600087803b158015610b7b57600080fd5b505af1158015610b8f573d6000803e3d6000fd5b50506065600090815260205250507f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517f4782f779000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b039190911690634782f77990604401600060405180830381600087803b158015610c2b57600080fd5b505af1158015610c3f573d6000803e3d6000fd5b50506040513392507fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf309150600090a250565b6060610c7c336129a8565b610cee5760405162461bcd60e51b815260206004820152603e60248201527f43616c6c696e6720636f6e7472616374206973206e6f7420617574686f72697a60448201527f656420746f20747261646520776974682070726f746f636c2066756e6473000060648201526084016106fe565b6060610d2e8786868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ee192505050565b9092509050610d4082878387876126df565b5095945050505050565b6040517f93552a3d000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b158015610dcb57600080fd5b505afa158015610ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e03919061399e565b6001600160a01b039190911660009081526001602090815260408083209483529390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6060610e64336129a8565b610ed65760405162461bcd60e51b815260206004820152603e60248201527f43616c6c696e6720636f6e7472616374206973206e6f7420617574686f72697a60448201527f656420746f20747261646520776974682070726f746f636c2066756e6473000060648201526084016106fe565b6060610f1687868686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129d692505050565b9092509050610d408287838787612d4e565b600080610f66606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517f409fdb720000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03919091169063409fdb729060240160006040518083038186803b158015610fc057600080fd5b505afa158015610fd4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffc91908101906138d8565b9150915061103b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517fdb2d904d0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03919091169063db2d904d90602401600060405180830381600087803b15801561109757600080fd5b505af11580156110ab573d6000803e3d6000fd5b5050505060005b80835111156111e457606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166001600160a01b031663d9caed1284838151811061111e57634e487b7160e01b600052603260045260246000fd5b60200260200101513385858151811061114757634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156111b957600080fd5b505af11580156111cd573d6000803e3d6000fd5b5050505080806111dc90613d35565b9150506110b2565b5060405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a25050565b6060610d4085858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129d692505050565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166001600160a01b031663a6a5f9fe346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112c357600080fd5b505af11580156112d7573d6000803e3d6000fd5b50505050506000611319606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517f52a664d90000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015234604483015291909116906352a664d990606401602060405180830381600087803b1580156113a357600080fd5b505af11580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db9190613a24565b905080156114e057606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517f2a6a897b0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490529190911690632a6a897b90604401600060405180830381600087803b15801561149d57600080fd5b505af11580156114b1573d6000803e3d6000fd5b505050506114e07f0000000000000000000000000000000000000000000000000000000000000000338361295c565b60405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a250565b6060610d408585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ee192505050565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fb3db428b0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03868116602483015260448201869052919091169063b3db428b90606401600060405180830381600087803b1580156115ee57600080fd5b505af1158015611602573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fee0862bf0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052919091169063ee0862bf90604401600060405180830381600087803b1580156116a057600080fd5b505af11580156116b4573d6000803e3d6000fd5b50506068600090815260205250507faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b03166040517f1d84cc180000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038681166024830152604482018690528481166064830152608482018490529190911690631d84cc189060a401600060405180830381600087803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fdc683bcf0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063dc683bcf90602401602060405180830381600087803b15801561181257600080fd5b505af1158015611826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184a9190613a24565b50606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015233602483015260448201849052919091169063d9caed1290606401600060405180830381600087803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b5050505061190e823383612deb565b60405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a250505050565b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b03166040517fd0eb66530000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052919091169063d0eb665390606401600060405180830381600087803b1580156119df57600080fd5b505af11580156119f3573d6000803e3d6000fd5b50506065600090815260205250507f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015233602483015260448201849052919091169063d9caed1290606401600060405180830381600087803b158015611a9757600080fd5b505af1158015611aab573d6000803e3d6000fd5b50506040513392507fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf309150600090a25050565b60608142811015611b315760405162461bcd60e51b815260206004820152601160248201527f547261646520686173206578706972656400000000000000000000000000000060448201526064016106fe565b6060611b83611b3f8a612e2e565b611b49908b613cb0565b888888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129d692505050565b9093509050611c2e338787600081611bab57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611bc09190613827565b8888611bcd600182613d07565b818110611bea57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611bff9190613827565b86600081518110611c2057634e487b7160e01b600052603260045260246000fd5b60200260200101518d612237565b611c3b8389838989612d4e565b50509695505050505050565b606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fee0862bf0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052919091169063ee0862bf90604401600060405180830381600087803b158015611ce157600080fd5b505af1158015611cf5573d6000803e3d6000fd5b50506068600090815260205250507faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b03166040517f498d55eb0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052919091169063498d55eb90606401600060405180830381600087803b158015611d9957600080fd5b505af1158015611dad573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fdc683bcf0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063dc683bcf90602401602060405180830381600087803b158015611e4457600080fd5b505af1158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c9190613a24565b50611e88823383612deb565b60405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a25050565b6000611ec6600a612710613cb0565b611ed183600a613ce8565b611edb9190613cc8565b92915050565b606080600283511015611f365760405162461bcd60e51b815260206004820152601460248201527f746f6b656e207061746820746f6f2073686f727400000000000000000000000060448201526064016106fe565b825167ffffffffffffffff811115611f5e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611f87578160200160208202803683370190505b5091508482600081518110611fac57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060018351611fc69190613d07565b67ffffffffffffffff811115611fec57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612015578160200160208202803683370190505b50905060005b600184516120299190613d07565b81101561222e57600084828151811061205257634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583600161206c9190613cb0565b8151811061208a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008784602081106120b657634e487b7160e01b600052603260045260246000fd5b1a60f81b7fff00000000000000000000000000000000000000000000000000000000000000161561214f5787846020811061210157634e487b7160e01b600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600160f81b146121405761213b8383612e3e565b61214a565b61214a8383612f34565b612159565b6121598383613009565b90508085858151811061217c57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506000806121aa8386866130de565b915091506121e08887815181106121d157634e487b7160e01b600052603260045260246000fd5b602002602001015183836131bb565b886121ec886001613cb0565b8151811061220a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505050505050808061222690613d35565b91505061201b565b50935093915050565b600080612275606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517f3500aa0b0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528881166024830152878116604483015260648201879052608482018690529190911690633500aa0b9060a4016040805180830381600087803b1580156122f057600080fd5b505af1158015612304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123289190613abc565b909250905081156124bc57606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517f2a6a897b0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018590529190911690632a6a897b90604401600060405180830381600087803b1580156123cd57600080fd5b505af11580156123e1573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fdc683bcf0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152919091169063dc683bcf90602401602060405180830381600087803b15801561247857600080fd5b505af115801561248c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b09190613a24565b506124bc85888461295c565b801561264b57606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fee0862bf0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201849052919091169063ee0862bf90604401600060405180830381600087803b15801561255c57600080fd5b505af1158015612570573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fdc683bcf0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152919091169063dc683bcf90602401602060405180830381600087803b15801561260757600080fd5b505af115801561261b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263f9190613a24565b5061264b868883612deb565b6040516001600160a01b038816907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a2604080516001600160a01b038881168252878116602083015291810186905260608101859052908816907f610a6fcfd0e5da3e1f98054761ba753182ff6f350467da719cae9d94e5f541369060800160405180910390a250505050505050565b8385600187516126ef9190613d07565b8151811061270d57634e487b7160e01b600052603260045260246000fd5b602002602001015110156127895760405162461bcd60e51b815260206004820152602860248201527f4d617267696e526f757465723a20494e53554646494349454e545f4f5554505560448201527f545f414d4f554e5400000000000000000000000000000000000000000000000060648201526084016106fe565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166001600160a01b031663d9caed12838360008181106127ed57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906128029190613827565b8560008151811061282357634e487b7160e01b600052603260045260246000fd5b60200260200101518860008151811061284c57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156128be57600080fd5b505af11580156128d2573d6000803e3d6000fd5b5050505061291d85848484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129189250612924915050565b6132fa565b5050505050565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b031690565b604080516001600160a01b038581168252602082018490528416917f3397b60e3ca1e9c0c75a033d62ab8731e9b2937c0690ae5d7f1bd37886b19d7d91015b60405180910390a2505050565b6001600160a01b03811660009081526001602090815260408083206007845290915290205460ff165b919050565b606080600283511015612a2b5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e207061746820746f6f2073686f727400000000000000000000000060448201526064016106fe565b825167ffffffffffffffff811115612a5357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a7c578160200160208202803683370190505b509150848260018451612a8f9190613d07565b81518110612aad57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060018351612ac79190613d07565b67ffffffffffffffff811115612aed57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b16578160200160208202803683370190505b509050600060018451612b299190613d07565b90505b801561222e57600084612b40600184613d07565b81518110612b5e57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110612b8a57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600087600185612ba49190613d07565b60208110612bc257634e487b7160e01b600052603260045260246000fd5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615612c655787612bf9600186613d07565b60208110612c1757634e487b7160e01b600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600160f81b14612c5657612c518383612e3e565b612c60565b612c608383612f34565b612c6f565b612c6f8383613009565b90508085612c7e600187613d07565b81518110612c9c57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050600080612cca8386866130de565b91509150612d00888781518110612cf157634e487b7160e01b600052603260045260246000fd5b60200260200101518383613528565b88612d0c600189613d07565b81518110612d2a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505050505050508080612d4690613d1e565b915050612b2c565b8385600081518110612d7057634e487b7160e01b600052603260045260246000fd5b602002602001015111156127895760405162461bcd60e51b8152602060048201526024808201527f4d617267696e526f757465723a204558434553534956455f494e5055545f414d60448201527f4f554e540000000000000000000000000000000000000000000000000000000060648201526084016106fe565b604080516001600160a01b038581168252602082018490528416917f8ec70c9430377a4bba035133e27a5b0f3b9951bc080833f6832bcbbb70a96dba910161299b565b6000612710611ed183600a613ce8565b6000806000612e4d858561366d565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091507f00000000000000000000000000000000000000000000000000000000000000009060480160405160208183030381529060405280519060200120600454604051602001612f13939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f19818403018152919052805160209091012095945050505050565b6000806000612f43858561366d565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091507f00000000000000000000000000000000000000000000000000000000000000009060480160405160208183030381529060405280519060200120600354604051602001612f13939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b6000806000613018858561366d565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091507f00000000000000000000000000000000000000000000000000000000000000009060480160405160208183030381529060405280519060200120600254604051602001612f13939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60008060006130ed858561366d565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561312c57600080fd5b505afa158015613140573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316491906139be565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b0316146131a95780826131ac565b81815b90999098509650505050505050565b600080841161320c5760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e540000000000000060448201526064016106fe565b60008311801561321c5750600082115b61328e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f495155494449545900000000000000000000000000000000000000000000000060648201526084016106fe565b60006132ba7f000000000000000000000000000000000000000000000000000000000000000086613ce8565b905060006132c88483613ce8565b90506000826132d987612710613ce8565b6132e39190613cb0565b90506132ef8183613cc8565b979650505050505050565b60005b835181101561291d5760008084838151811061332957634e487b7160e01b600052603260045260246000fd5b60200260200101518584600161333f9190613cb0565b8151811061335d57634e487b7160e01b600052603260045260246000fd5b6020026020010151915091506000613375838361366d565b509050600088613386866001613cb0565b815181106133a457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080836001600160a01b0316866001600160a01b0316146133d2578260006133d6565b6000835b91509150600060018b516133ea9190613d07565b88106133f65788613429565b8a613402896001613cb0565b8151811061342057634e487b7160e01b600052603260045260246000fd5b60200260200101515b905060008b898151811061344d57634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b031663022c0d9f858585600067ffffffffffffffff81111561349157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156134bb576020820181803683370190505b506040518563ffffffff1660e01b81526004016134db9493929190613be9565b600060405180830381600087803b1580156134f557600080fd5b505af1158015613509573d6000803e3d6000fd5b505050505050505050505050808061352090613d35565b9150506132fd565b60008084116135795760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e5400000000000060448201526064016106fe565b6000831180156135895750600082115b6135fb5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f495155494449545900000000000000000000000000000000000000000000000060648201526084016106fe565b60006136078585613ce8565b61361390612710613ce8565b905060007f00000000000000000000000000000000000000000000000000000000000000006136428786613d07565b61364c9190613ce8565b90506136588183613cc8565b613663906001613cb0565b9695505050505050565b600080826001600160a01b0316846001600160a01b031614156136d25760405162461bcd60e51b815260206004820152601260248201527f4964656e746963616c206164647265737321000000000000000000000000000060448201526064016106fe565b826001600160a01b0316846001600160a01b0316106136f25782846136f5565b83835b90925090506001600160a01b0382166137505760405162461bcd60e51b815260206004820152600d60248201527f5a65726f2061646472657373210000000000000000000000000000000000000060448201526064016106fe565b9250929050565b60008083601f840112613768578182fd5b50813567ffffffffffffffff81111561377f578182fd5b6020830191508360208260051b850101111561375057600080fd5b600082601f8301126137aa578081fd5b815160206137bf6137ba83613c8c565b613c5b565b80838252828201915082860187848660051b89010111156137de578586fd5b855b858110156137fc578151845292840192908401906001016137e0565b5090979650505050505050565b80516dffffffffffffffffffffffffffff811681146129d157600080fd5b600060208284031215613838578081fd5b813561384381613d7c565b9392505050565b60006020828403121561385b578081fd5b815161384381613d7c565b60008060408385031215613878578081fd5b823561388381613d7c565b946020939093013593505050565b600080600080608085870312156138a6578182fd5b84356138b181613d7c565b93506020850135925060408501356138c881613d7c565b9396929550929360600135925050565b600080604083850312156138ea578182fd5b825167ffffffffffffffff80821115613901578384fd5b818501915085601f830112613914578384fd5b815160206139246137ba83613c8c565b8083825282820191508286018a848660051b8901011115613943578889fd5b8896505b8487101561396e57805161395a81613d7c565b835260019690960195918301918301613947565b5091880151919650909350505080821115613987578283fd5b506139948582860161379a565b9150509250929050565b6000602082840312156139af578081fd5b81518015158114613843578182fd5b6000806000606084860312156139d2578283fd5b6139db84613809565b92506139e960208501613809565b9150604084015163ffffffff81168114613a01578182fd5b809150509250925092565b600060208284031215613a1d578081fd5b5035919050565b600060208284031215613a35578081fd5b5051919050565b60008060408385031215613a4e578182fd5b823591506020830135613a6081613d7c565b809150509250929050565b60008060008060608587031215613a80578384fd5b8435935060208501359250604085013567ffffffffffffffff811115613aa4578283fd5b613ab087828801613757565b95989497509550505050565b60008060408385031215613ace578182fd5b505080516020909101519092909150565b600080600080600060808688031215613af6578283fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115613b21578182fd5b613b2d88828901613757565b969995985093965092949392505050565b60008060008060008060a08789031215613b56578384fd5b863595506020870135945060408701359350606087013567ffffffffffffffff811115613b81578182fd5b613b8d89828a01613757565b979a9699509497949695608090950135949350505050565b6020808252825182820181905260009190848201906040850190845b81811015613bdd57835183529284019291840191600101613bc1565b50909695505050505050565b6000858252602085818401526001600160a01b0385166040840152608060608401528351806080850152825b81811015613c315785810183015185820160a001528201613c15565b81811115613c42578360a083870101525b50601f01601f19169290920160a0019695505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c8457613c84613d66565b604052919050565b600067ffffffffffffffff821115613ca657613ca6613d66565b5060051b60200190565b60008219821115613cc357613cc3613d50565b500190565b600082613ce357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613d0257613d02613d50565b500290565b600082821015613d1957613d19613d50565b500390565b600081613d2d57613d2d613d50565b506000190190565b6000600019821415613d4957613d49613d50565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613d9157600080fd5b5056fea26469706673582212202d926d785310821ed01f9ff961adcd52d271cd3f5a25b4c51767a5385797aa7a64736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106101ac5760003560e01c806394427b20116100ec578063db4292351161008a578063e3e0626b11610064578063e3e0626b14610522578063e3ee432714610542578063e9c3f77d14610562578063eedb97c714610598576101ac565b8063db429235146104c2578063df7c20f9146104f6578063e2abb5c41461050c576101ac565b8063ad5c4648116100c6578063ad5c46481461041a578063b7453e271461044e578063b852eb0d1461046e578063cb6067dd146104a2576101ac565b806394427b20146103c857806395e911a8146103d0578063a75208a814610404576101ac565b8063351ae6101161015957806353d7ff9f1161013357806353d7ff9f146103285780636969867014610348578063799d34e11461035d5780637a1a04df1461037d576101ac565b8063351ae610146102b4578063392f5f64146102d4578063447d52ba14610308576101ac565b80631084bd6d1161018a5780631084bd6d146102515780631306d902146102745780631dce3baa14610294576101ac565b8063059b157a146101b1578063071060a6146102025780630abb674c14610224575b600080fd5b3480156101bd57600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020e57600080fd5b5061022261021d366004613a0c565b6105b8565b005b34801561023057600080fd5b5061024461023f366004613b3e565b6106af565b6040516101f99190613ba5565b34801561025d57600080fd5b50610266600a81565b6040519081526020016101f9565b34801561028057600080fd5b5061022261028f366004613866565b61082e565b3480156102a057600080fd5b506102226102af366004613a0c565b610abb565b3480156102c057600080fd5b506102446102cf366004613adf565b610c71565b3480156102e057600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b34801561031457600080fd5b50610222610323366004613a3c565b610d4a565b34801561033457600080fd5b50610244610343366004613adf565b610e59565b34801561035457600080fd5b50610222610f28565b34801561036957600080fd5b50610244610378366004613a6b565b611214565b34801561038957600080fd5b506103b8610398366004613866565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101f9565b610222611254565b3480156103dc57600080fd5b506102667f000000000000000000000000000000000000000000000000000000000000000081565b34801561041057600080fd5b5061026660025481565b34801561042657600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b34801561045a57600080fd5b50610244610469366004613a6b565b61150e565b34801561047a57600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ae57600080fd5b506102226104bd366004613891565b61154e565b3480156104ce57600080fd5b506101e57f000000000000000000000000000000000000000000000000000000000000000081565b34801561050257600080fd5b5061026660035481565b34801561051857600080fd5b5061026660045481565b34801561052e57600080fd5b5061022261053d366004613866565b61193f565b34801561054e57600080fd5b5061024461055d366004613b3e565b611ade565b34801561056e57600080fd5b506101e561057d366004613a0c565b6000602081905290815260409020546001600160a01b031681565b3480156105a457600080fd5b506102226105b3366004613866565b611c47565b6040517fb4ed0b6d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561063157600080fd5b505afa158015610645573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610669919061384a565b60009182526020829052604090912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055565b606081428110156107075760405162461bcd60e51b815260206004820152601160248201527f547261646520686173206578706972656400000000000000000000000000000060448201526064015b60405180910390fd5b600061071289611eb7565b9050606061075d610723838c613d07565b89898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ee192505050565b909450905061081433888860008161078557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061079a9190613827565b89896107a7600182613d07565b8181106107c457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107d99190613827565b8d8860018a516107e99190613d07565b8151811061080757634e487b7160e01b600052603260045260246000fd5b6020026020010151612237565b610821848a838a8a6126df565b5050509695505050505050565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fb3db428b0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052919091169063b3db428b90606401600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b505050506000610923606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517f52a664d90000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0385811660248301526044820185905291909116906352a664d990606401602060405180830381600087803b15801561098e57600080fd5b505af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c69190613a24565b90508015610a8b57606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517f2a6a897b0000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018490529190911690632a6a897b90604401600060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b50505050610a8b83338361295c565b60405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a2505050565b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b03166040517fd0eb66530000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015260448201849052919091169063d0eb665390606401600060405180830381600087803b158015610b7b57600080fd5b505af1158015610b8f573d6000803e3d6000fd5b50506065600090815260205250507f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517f4782f779000000000000000000000000000000000000000000000000000000008152336004820152602481018390526001600160a01b039190911690634782f77990604401600060405180830381600087803b158015610c2b57600080fd5b505af1158015610c3f573d6000803e3d6000fd5b50506040513392507fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf309150600090a250565b6060610c7c336129a8565b610cee5760405162461bcd60e51b815260206004820152603e60248201527f43616c6c696e6720636f6e7472616374206973206e6f7420617574686f72697a60448201527f656420746f20747261646520776974682070726f746f636c2066756e6473000060648201526084016106fe565b6060610d2e8786868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ee192505050565b9092509050610d4082878387876126df565b5095945050505050565b6040517f93552a3d000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b158015610dcb57600080fd5b505afa158015610ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e03919061399e565b6001600160a01b039190911660009081526001602090815260408083209483529390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6060610e64336129a8565b610ed65760405162461bcd60e51b815260206004820152603e60248201527f43616c6c696e6720636f6e7472616374206973206e6f7420617574686f72697a60448201527f656420746f20747261646520776974682070726f746f636c2066756e6473000060648201526084016106fe565b6060610f1687868686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129d692505050565b9092509050610d408287838787612d4e565b600080610f66606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517f409fdb720000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03919091169063409fdb729060240160006040518083038186803b158015610fc057600080fd5b505afa158015610fd4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ffc91908101906138d8565b9150915061103b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517fdb2d904d0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03919091169063db2d904d90602401600060405180830381600087803b15801561109757600080fd5b505af11580156110ab573d6000803e3d6000fd5b5050505060005b80835111156111e457606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166001600160a01b031663d9caed1284838151811061111e57634e487b7160e01b600052603260045260246000fd5b60200260200101513385858151811061114757634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156111b957600080fd5b505af11580156111cd573d6000803e3d6000fd5b5050505080806111dc90613d35565b9150506110b2565b5060405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a25050565b6060610d4085858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129d692505050565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166001600160a01b031663a6a5f9fe346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112c357600080fd5b505af11580156112d7573d6000803e3d6000fd5b50505050506000611319606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517f52a664d90000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116602483015234604483015291909116906352a664d990606401602060405180830381600087803b1580156113a357600080fd5b505af11580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db9190613a24565b905080156114e057606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517f2a6a897b0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490529190911690632a6a897b90604401600060405180830381600087803b15801561149d57600080fd5b505af11580156114b1573d6000803e3d6000fd5b505050506114e07f0000000000000000000000000000000000000000000000000000000000000000338361295c565b60405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a250565b6060610d408585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611ee192505050565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fb3db428b0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03868116602483015260448201869052919091169063b3db428b90606401600060405180830381600087803b1580156115ee57600080fd5b505af1158015611602573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fee0862bf0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052919091169063ee0862bf90604401600060405180830381600087803b1580156116a057600080fd5b505af11580156116b4573d6000803e3d6000fd5b50506068600090815260205250507faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b03166040517f1d84cc180000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038681166024830152604482018690528481166064830152608482018490529190911690631d84cc189060a401600060405180830381600087803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fdc683bcf0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063dc683bcf90602401602060405180830381600087803b15801561181257600080fd5b505af1158015611826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184a9190613a24565b50606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015233602483015260448201849052919091169063d9caed1290606401600060405180830381600087803b1580156118eb57600080fd5b505af11580156118ff573d6000803e3d6000fd5b5050505061190e823383612deb565b60405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a250505050565b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b03166040517fd0eb66530000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052919091169063d0eb665390606401600060405180830381600087803b1580156119df57600080fd5b505af11580156119f3573d6000803e3d6000fd5b50506065600090815260205250507f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015233602483015260448201849052919091169063d9caed1290606401600060405180830381600087803b158015611a9757600080fd5b505af1158015611aab573d6000803e3d6000fd5b50506040513392507fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf309150600090a25050565b60608142811015611b315760405162461bcd60e51b815260206004820152601160248201527f547261646520686173206578706972656400000000000000000000000000000060448201526064016106fe565b6060611b83611b3f8a612e2e565b611b49908b613cb0565b888888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129d692505050565b9093509050611c2e338787600081611bab57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611bc09190613827565b8888611bcd600182613d07565b818110611bea57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611bff9190613827565b86600081518110611c2057634e487b7160e01b600052603260045260246000fd5b60200260200101518d612237565b611c3b8389838989612d4e565b50509695505050505050565b606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fee0862bf0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052919091169063ee0862bf90604401600060405180830381600087803b158015611ce157600080fd5b505af1158015611cf5573d6000803e3d6000fd5b50506068600090815260205250507faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b03166040517f498d55eb0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03848116602483015260448201849052919091169063498d55eb90606401600060405180830381600087803b158015611d9957600080fd5b505af1158015611dad573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fdc683bcf0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063dc683bcf90602401602060405180830381600087803b158015611e4457600080fd5b505af1158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c9190613a24565b50611e88823383612deb565b60405133907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a25050565b6000611ec6600a612710613cb0565b611ed183600a613ce8565b611edb9190613cc8565b92915050565b606080600283511015611f365760405162461bcd60e51b815260206004820152601460248201527f746f6b656e207061746820746f6f2073686f727400000000000000000000000060448201526064016106fe565b825167ffffffffffffffff811115611f5e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611f87578160200160208202803683370190505b5091508482600081518110611fac57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060018351611fc69190613d07565b67ffffffffffffffff811115611fec57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612015578160200160208202803683370190505b50905060005b600184516120299190613d07565b81101561222e57600084828151811061205257634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583600161206c9190613cb0565b8151811061208a57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008784602081106120b657634e487b7160e01b600052603260045260246000fd5b1a60f81b7fff00000000000000000000000000000000000000000000000000000000000000161561214f5787846020811061210157634e487b7160e01b600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600160f81b146121405761213b8383612e3e565b61214a565b61214a8383612f34565b612159565b6121598383613009565b90508085858151811061217c57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506000806121aa8386866130de565b915091506121e08887815181106121d157634e487b7160e01b600052603260045260246000fd5b602002602001015183836131bb565b886121ec886001613cb0565b8151811061220a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505050505050808061222690613d35565b91505061201b565b50935093915050565b600080612275606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f99546001600160a01b031690565b6040517f3500aa0b0000000000000000000000000000000000000000000000000000000081526001600160a01b0389811660048301528881166024830152878116604483015260648201879052608482018690529190911690633500aa0b9060a4016040805180830381600087803b1580156122f057600080fd5b505af1158015612304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123289190613abc565b909250905081156124bc57606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517f2a6a897b0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018590529190911690632a6a897b90604401600060405180830381600087803b1580156123cd57600080fd5b505af11580156123e1573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fdc683bcf0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152919091169063dc683bcf90602401602060405180830381600087803b15801561247857600080fd5b505af115801561248c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b09190613a24565b506124bc85888461295c565b801561264b57606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fee0862bf0000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015260248201849052919091169063ee0862bf90604401600060405180830381600087803b15801561255c57600080fd5b505af1158015612570573d6000803e3d6000fd5b50506066600090815260205250507f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b546001600160a01b03166040517fdc683bcf0000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152919091169063dc683bcf90602401602060405180830381600087803b15801561260757600080fd5b505af115801561261b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263f9190613a24565b5061264b868883612deb565b6040516001600160a01b038816907fe7b1fae3a790ceab07642c09617df79428b02832cd512bbfdd4db50272dcdf3090600090a2604080516001600160a01b038881168252878116602083015291810186905260608101859052908816907f610a6fcfd0e5da3e1f98054761ba753182ff6f350467da719cae9d94e5f541369060800160405180910390a250505050505050565b8385600187516126ef9190613d07565b8151811061270d57634e487b7160e01b600052603260045260246000fd5b602002602001015110156127895760405162461bcd60e51b815260206004820152602860248201527f4d617267696e526f757465723a20494e53554646494349454e545f4f5554505560448201527f545f414d4f554e5400000000000000000000000000000000000000000000000060648201526084016106fe565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166001600160a01b031663d9caed12838360008181106127ed57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906128029190613827565b8560008151811061282357634e487b7160e01b600052603260045260246000fd5b60200260200101518860008151811061284c57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b1580156128be57600080fd5b505af11580156128d2573d6000803e3d6000fd5b5050505061291d85848484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506129189250612924915050565b6132fa565b5050505050565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b031690565b604080516001600160a01b038581168252602082018490528416917f3397b60e3ca1e9c0c75a033d62ab8731e9b2937c0690ae5d7f1bd37886b19d7d91015b60405180910390a2505050565b6001600160a01b03811660009081526001602090815260408083206007845290915290205460ff165b919050565b606080600283511015612a2b5760405162461bcd60e51b815260206004820152601460248201527f746f6b656e207061746820746f6f2073686f727400000000000000000000000060448201526064016106fe565b825167ffffffffffffffff811115612a5357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612a7c578160200160208202803683370190505b509150848260018451612a8f9190613d07565b81518110612aad57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060018351612ac79190613d07565b67ffffffffffffffff811115612aed57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612b16578160200160208202803683370190505b509050600060018451612b299190613d07565b90505b801561222e57600084612b40600184613d07565b81518110612b5e57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110612b8a57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600087600185612ba49190613d07565b60208110612bc257634e487b7160e01b600052603260045260246000fd5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615612c655787612bf9600186613d07565b60208110612c1757634e487b7160e01b600052603260045260246000fd5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600160f81b14612c5657612c518383612e3e565b612c60565b612c608383612f34565b612c6f565b612c6f8383613009565b90508085612c7e600187613d07565b81518110612c9c57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050600080612cca8386866130de565b91509150612d00888781518110612cf157634e487b7160e01b600052603260045260246000fd5b60200260200101518383613528565b88612d0c600189613d07565b81518110612d2a57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505050505050508080612d4690613d1e565b915050612b2c565b8385600081518110612d7057634e487b7160e01b600052603260045260246000fd5b602002602001015111156127895760405162461bcd60e51b8152602060048201526024808201527f4d617267696e526f757465723a204558434553534956455f494e5055545f414d60448201527f4f554e540000000000000000000000000000000000000000000000000000000060648201526084016106fe565b604080516001600160a01b038581168252602082018490528416917f8ec70c9430377a4bba035133e27a5b0f3b9951bc080833f6832bcbbb70a96dba910161299b565b6000612710611ed183600a613ce8565b6000806000612e4d858561366d565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091507f00000000000000000000000000000000000000000000000000000000000000009060480160405160208183030381529060405280519060200120600454604051602001612f13939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f19818403018152919052805160209091012095945050505050565b6000806000612f43858561366d565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091507f00000000000000000000000000000000000000000000000000000000000000009060480160405160208183030381529060405280519060200120600354604051602001612f13939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b6000806000613018858561366d565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015291935091507f00000000000000000000000000000000000000000000000000000000000000009060480160405160208183030381529060405280519060200120600254604051602001612f13939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60008060006130ed858561366d565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561312c57600080fd5b505afa158015613140573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316491906139be565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150826001600160a01b0316876001600160a01b0316146131a95780826131ac565b81815b90999098509650505050505050565b600080841161320c5760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e540000000000000060448201526064016106fe565b60008311801561321c5750600082115b61328e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f495155494449545900000000000000000000000000000000000000000000000060648201526084016106fe565b60006132ba7f000000000000000000000000000000000000000000000000000000000000000086613ce8565b905060006132c88483613ce8565b90506000826132d987612710613ce8565b6132e39190613cb0565b90506132ef8183613cc8565b979650505050505050565b60005b835181101561291d5760008084838151811061332957634e487b7160e01b600052603260045260246000fd5b60200260200101518584600161333f9190613cb0565b8151811061335d57634e487b7160e01b600052603260045260246000fd5b6020026020010151915091506000613375838361366d565b509050600088613386866001613cb0565b815181106133a457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080836001600160a01b0316866001600160a01b0316146133d2578260006133d6565b6000835b91509150600060018b516133ea9190613d07565b88106133f65788613429565b8a613402896001613cb0565b8151811061342057634e487b7160e01b600052603260045260246000fd5b60200260200101515b905060008b898151811061344d57634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b031663022c0d9f858585600067ffffffffffffffff81111561349157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156134bb576020820181803683370190505b506040518563ffffffff1660e01b81526004016134db9493929190613be9565b600060405180830381600087803b1580156134f557600080fd5b505af1158015613509573d6000803e3d6000fd5b505050505050505050505050808061352090613d35565b9150506132fd565b60008084116135795760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e5400000000000060448201526064016106fe565b6000831180156135895750600082115b6135fb5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f495155494449545900000000000000000000000000000000000000000000000060648201526084016106fe565b60006136078585613ce8565b61361390612710613ce8565b905060007f00000000000000000000000000000000000000000000000000000000000000006136428786613d07565b61364c9190613ce8565b90506136588183613cc8565b613663906001613cb0565b9695505050505050565b600080826001600160a01b0316846001600160a01b031614156136d25760405162461bcd60e51b815260206004820152601260248201527f4964656e746963616c206164647265737321000000000000000000000000000060448201526064016106fe565b826001600160a01b0316846001600160a01b0316106136f25782846136f5565b83835b90925090506001600160a01b0382166137505760405162461bcd60e51b815260206004820152600d60248201527f5a65726f2061646472657373210000000000000000000000000000000000000060448201526064016106fe565b9250929050565b60008083601f840112613768578182fd5b50813567ffffffffffffffff81111561377f578182fd5b6020830191508360208260051b850101111561375057600080fd5b600082601f8301126137aa578081fd5b815160206137bf6137ba83613c8c565b613c5b565b80838252828201915082860187848660051b89010111156137de578586fd5b855b858110156137fc578151845292840192908401906001016137e0565b5090979650505050505050565b80516dffffffffffffffffffffffffffff811681146129d157600080fd5b600060208284031215613838578081fd5b813561384381613d7c565b9392505050565b60006020828403121561385b578081fd5b815161384381613d7c565b60008060408385031215613878578081fd5b823561388381613d7c565b946020939093013593505050565b600080600080608085870312156138a6578182fd5b84356138b181613d7c565b93506020850135925060408501356138c881613d7c565b9396929550929360600135925050565b600080604083850312156138ea578182fd5b825167ffffffffffffffff80821115613901578384fd5b818501915085601f830112613914578384fd5b815160206139246137ba83613c8c565b8083825282820191508286018a848660051b8901011115613943578889fd5b8896505b8487101561396e57805161395a81613d7c565b835260019690960195918301918301613947565b5091880151919650909350505080821115613987578283fd5b506139948582860161379a565b9150509250929050565b6000602082840312156139af578081fd5b81518015158114613843578182fd5b6000806000606084860312156139d2578283fd5b6139db84613809565b92506139e960208501613809565b9150604084015163ffffffff81168114613a01578182fd5b809150509250925092565b600060208284031215613a1d578081fd5b5035919050565b600060208284031215613a35578081fd5b5051919050565b60008060408385031215613a4e578182fd5b823591506020830135613a6081613d7c565b809150509250929050565b60008060008060608587031215613a80578384fd5b8435935060208501359250604085013567ffffffffffffffff811115613aa4578283fd5b613ab087828801613757565b95989497509550505050565b60008060408385031215613ace578182fd5b505080516020909101519092909150565b600080600080600060808688031215613af6578283fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115613b21578182fd5b613b2d88828901613757565b969995985093965092949392505050565b60008060008060008060a08789031215613b56578384fd5b863595506020870135945060408701359350606087013567ffffffffffffffff811115613b81578182fd5b613b8d89828a01613757565b979a9699509497949695608090950135949350505050565b6020808252825182820181905260009190848201906040850190845b81811015613bdd57835183529284019291840191600101613bc1565b50909695505050505050565b6000858252602085818401526001600160a01b0385166040840152608060608401528351806080850152825b81811015613c315785810183015185820160a001528201613c15565b81811115613c42578360a083870101525b50601f01601f19169290920160a0019695505050505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613c8457613c84613d66565b604052919050565b600067ffffffffffffffff821115613ca657613ca6613d66565b5060051b60200190565b60008219821115613cc357613cc3613d50565b500190565b600082613ce357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613d0257613d02613d50565b500290565b600082821015613d1957613d19613d50565b500390565b600081613d2d57613d2d613d50565b506000190190565b6000600019821415613d4957613d49613d50565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114613d9157600080fd5b5056fea26469706673582212202d926d785310821ed01f9ff961adcd52d271cd3f5a25b4c51767a5385797aa7a64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "crossOvercollateralizedBorrow(address,uint256,address,uint256)": {
        "details": "caution: the account still has to have a positive balaance at the end of the withdraw. So an underwater account may not be able to withdraw"
      }
    },
    "title": "Top level transaction controller",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "authorizedSwapExactT4T(uint256,uint256,bytes32,address[])": {
        "notice": "make swaps on AMM using protocol funds, only for authorized contracts"
      },
      "crossBorrow(address,uint256)": {
        "notice": "borrow into cross margin trading account"
      },
      "crossCloseAccount()": {
        "notice": "close an account that is no longer borrowing and return gains"
      },
      "crossDeposit(address,uint256)": {
        "notice": "traders call this to deposit funds on cross margin"
      },
      "crossDepositETH()": {
        "notice": "deposit wrapped ehtereum into cross margin account"
      },
      "crossOvercollateralizedBorrow(address,uint256,address,uint256)": {
        "notice": "convenience function to perform overcollateralized borrowing against a cross margin account."
      },
      "crossWithdraw(address,uint256)": {
        "notice": "withdraw deposits/earnings from cross margin account"
      },
      "crossWithdrawETH(uint256)": {
        "notice": "withdraw ethereum from cross margin account"
      },
      "swapExactTokensForTokens(uint256,uint256,bytes32,address[],uint256)": {
        "notice": "entry point for swapping tokens held in cross margin account"
      },
      "swapTokensForExactTokens(uint256,uint256,bytes32,address[],uint256)": {
        "notice": "entry point for swapping tokens held in cross margin account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9935,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9941,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 24009,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "amm1InitHash",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 24011,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "amm2InitHash",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 24013,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "amm3InitHash",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}